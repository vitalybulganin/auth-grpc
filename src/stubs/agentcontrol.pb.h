// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agentcontrol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_agentcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_agentcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_agentcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_agentcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agentcontrol_2eproto;
namespace Avanpost {
namespace Sso {
namespace Agent {
namespace Grpc {
class AgentChannelMessage;
struct AgentChannelMessageDefaultTypeInternal;
extern AgentChannelMessageDefaultTypeInternal _AgentChannelMessage_default_instance_;
class Application;
struct ApplicationDefaultTypeInternal;
extern ApplicationDefaultTypeInternal _Application_default_instance_;
class ApplicationFactorRequest;
struct ApplicationFactorRequestDefaultTypeInternal;
extern ApplicationFactorRequestDefaultTypeInternal _ApplicationFactorRequest_default_instance_;
class AuthenticationFactor;
struct AuthenticationFactorDefaultTypeInternal;
extern AuthenticationFactorDefaultTypeInternal _AuthenticationFactor_default_instance_;
class AuthenticationFactor_MetadataEntry_DoNotUse;
struct AuthenticationFactor_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AuthenticationFactor_MetadataEntry_DoNotUseDefaultTypeInternal _AuthenticationFactor_MetadataEntry_DoNotUse_default_instance_;
class AuthenticationRequest;
struct AuthenticationRequestDefaultTypeInternal;
extern AuthenticationRequestDefaultTypeInternal _AuthenticationRequest_default_instance_;
class AuthenticationRequest_MetadataEntry_DoNotUse;
struct AuthenticationRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AuthenticationRequest_MetadataEntry_DoNotUseDefaultTypeInternal _AuthenticationRequest_MetadataEntry_DoNotUse_default_instance_;
class AuthenticationResponse;
struct AuthenticationResponseDefaultTypeInternal;
extern AuthenticationResponseDefaultTypeInternal _AuthenticationResponse_default_instance_;
class AuthenticationResponse_MetadataEntry_DoNotUse;
struct AuthenticationResponse_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AuthenticationResponse_MetadataEntry_DoNotUseDefaultTypeInternal _AuthenticationResponse_MetadataEntry_DoNotUse_default_instance_;
class ChangePasswordRequest;
struct ChangePasswordRequestDefaultTypeInternal;
extern ChangePasswordRequestDefaultTypeInternal _ChangePasswordRequest_default_instance_;
class ChangePasswordResponse;
struct ChangePasswordResponseDefaultTypeInternal;
extern ChangePasswordResponseDefaultTypeInternal _ChangePasswordResponse_default_instance_;
class FactorBindingRequest;
struct FactorBindingRequestDefaultTypeInternal;
extern FactorBindingRequestDefaultTypeInternal _FactorBindingRequest_default_instance_;
class FactorListResponse;
struct FactorListResponseDefaultTypeInternal;
extern FactorListResponseDefaultTypeInternal _FactorListResponse_default_instance_;
class PasswordInfo;
struct PasswordInfoDefaultTypeInternal;
extern PasswordInfoDefaultTypeInternal _PasswordInfo_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class ServerChannelMessage;
struct ServerChannelMessageDefaultTypeInternal;
extern ServerChannelMessageDefaultTypeInternal _ServerChannelMessage_default_instance_;
class SessionRequest;
struct SessionRequestDefaultTypeInternal;
extern SessionRequestDefaultTypeInternal _SessionRequest_default_instance_;
class SessionResponse;
struct SessionResponseDefaultTypeInternal;
extern SessionResponseDefaultTypeInternal _SessionResponse_default_instance_;
class SetUserCredentialRequest;
struct SetUserCredentialRequestDefaultTypeInternal;
extern SetUserCredentialRequestDefaultTypeInternal _SetUserCredentialRequest_default_instance_;
class SetUserCredentialResponse;
struct SetUserCredentialResponseDefaultTypeInternal;
extern SetUserCredentialResponseDefaultTypeInternal _SetUserCredentialResponse_default_instance_;
class TemporaryAuthCodeRequest;
struct TemporaryAuthCodeRequestDefaultTypeInternal;
extern TemporaryAuthCodeRequestDefaultTypeInternal _TemporaryAuthCodeRequest_default_instance_;
class TemporaryAuthCodeResponse;
struct TemporaryAuthCodeResponseDefaultTypeInternal;
extern TemporaryAuthCodeResponseDefaultTypeInternal _TemporaryAuthCodeResponse_default_instance_;
class UserApplicationsResponse;
struct UserApplicationsResponseDefaultTypeInternal;
extern UserApplicationsResponseDefaultTypeInternal _UserApplicationsResponse_default_instance_;
class UserCredentials;
struct UserCredentialsDefaultTypeInternal;
extern UserCredentialsDefaultTypeInternal _UserCredentials_default_instance_;
class UserRequest;
struct UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
}  // namespace Grpc
}  // namespace Agent
}  // namespace Sso
}  // namespace Avanpost
PROTOBUF_NAMESPACE_OPEN
template<> ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AgentChannelMessage>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::Application* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::Application>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::ApplicationFactorRequest* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::ApplicationFactorRequest>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AuthenticationFactor>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AuthenticationFactor_MetadataEntry_DoNotUse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AuthenticationRequest>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AuthenticationRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AuthenticationResponse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AuthenticationResponse_MetadataEntry_DoNotUse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::FactorBindingRequest>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::FactorListResponse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::FactorListResponse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::PasswordInfo* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::PasswordInfo>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::Result* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::Result>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::ServerChannelMessage* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::SessionRequest* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::SessionRequest>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::SessionResponse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::SessionResponse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::UserCredentials* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::UserCredentials>(Arena*);
template<> ::Avanpost::Sso::Agent::Grpc::UserRequest* Arena::CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::UserRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Avanpost {
namespace Sso {
namespace Agent {
namespace Grpc {

enum FactorType : int {
  EMPTY = 0,
  PASSWORD = 1,
  TOTP = 2,
  SMS = 3,
  KERBEROS = 4,
  SMARTCARD = 5,
  EMAIL = 6,
  TELEGRAM = 7,
  PAYCONTROL = 8,
  FactorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FactorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FactorType_IsValid(int value);
constexpr FactorType FactorType_MIN = EMPTY;
constexpr FactorType FactorType_MAX = PAYCONTROL;
constexpr int FactorType_ARRAYSIZE = FactorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FactorType_descriptor();
template<typename T>
inline const std::string& FactorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FactorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FactorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FactorType_descriptor(), enum_t_value);
}
inline bool FactorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FactorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FactorType>(
    FactorType_descriptor(), name, value);
}
enum BindingOperation : int {
  ADD = 0,
  UPDATE = 1,
  REMOVE = 2,
  BindingOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BindingOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BindingOperation_IsValid(int value);
constexpr BindingOperation BindingOperation_MIN = ADD;
constexpr BindingOperation BindingOperation_MAX = REMOVE;
constexpr int BindingOperation_ARRAYSIZE = BindingOperation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BindingOperation_descriptor();
template<typename T>
inline const std::string& BindingOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BindingOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BindingOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BindingOperation_descriptor(), enum_t_value);
}
inline bool BindingOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BindingOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BindingOperation>(
    BindingOperation_descriptor(), name, value);
}
enum AuthenticationStatus : int {
  AccessReject = 0,
  AccessAccept = 1,
  AccessChallenge = 2,
  AccountLocked = 3,
  PasswordExpired = 4,
  AuthenticationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AuthenticationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AuthenticationStatus_IsValid(int value);
constexpr AuthenticationStatus AuthenticationStatus_MIN = AccessReject;
constexpr AuthenticationStatus AuthenticationStatus_MAX = PasswordExpired;
constexpr int AuthenticationStatus_ARRAYSIZE = AuthenticationStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticationStatus_descriptor();
template<typename T>
inline const std::string& AuthenticationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticationStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticationStatus_descriptor(), enum_t_value);
}
inline bool AuthenticationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthenticationStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticationStatus>(
    AuthenticationStatus_descriptor(), name, value);
}
enum ChangePasswordStatus : int {
  PasswordAccept = 0,
  PasswordReject = 1,
  ChangePasswordStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChangePasswordStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChangePasswordStatus_IsValid(int value);
constexpr ChangePasswordStatus ChangePasswordStatus_MIN = PasswordAccept;
constexpr ChangePasswordStatus ChangePasswordStatus_MAX = PasswordReject;
constexpr int ChangePasswordStatus_ARRAYSIZE = ChangePasswordStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangePasswordStatus_descriptor();
template<typename T>
inline const std::string& ChangePasswordStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangePasswordStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangePasswordStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangePasswordStatus_descriptor(), enum_t_value);
}
inline bool ChangePasswordStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChangePasswordStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangePasswordStatus>(
    ChangePasswordStatus_descriptor(), name, value);
}
enum SetUserCredentialStatus : int {
  Accept = 0,
  Reject = 1,
  UserMustProvidePassword = 2,
  SetUserCredentialStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SetUserCredentialStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SetUserCredentialStatus_IsValid(int value);
constexpr SetUserCredentialStatus SetUserCredentialStatus_MIN = Accept;
constexpr SetUserCredentialStatus SetUserCredentialStatus_MAX = UserMustProvidePassword;
constexpr int SetUserCredentialStatus_ARRAYSIZE = SetUserCredentialStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetUserCredentialStatus_descriptor();
template<typename T>
inline const std::string& SetUserCredentialStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetUserCredentialStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetUserCredentialStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetUserCredentialStatus_descriptor(), enum_t_value);
}
inline bool SetUserCredentialStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetUserCredentialStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetUserCredentialStatus>(
    SetUserCredentialStatus_descriptor(), name, value);
}
// ===================================================================

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 2,
    kIsErrorFieldNumber = 1,
  };
  // string errorText = 2;
  void clear_errortext();
  const std::string& errortext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errortext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errortext();
  PROTOBUF_NODISCARD std::string* release_errortext();
  void set_allocated_errortext(std::string* errortext);
  private:
  const std::string& _internal_errortext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errortext(const std::string& value);
  std::string* _internal_mutable_errortext();
  public:

  // bool isError = 1;
  void clear_iserror();
  bool iserror() const;
  void set_iserror(bool value);
  private:
  bool _internal_iserror() const;
  void _internal_set_iserror(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errortext_;
  bool iserror_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class UserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  ~UserRequest() override;
  explicit constexpr UserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class TemporaryAuthCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest) */ {
 public:
  inline TemporaryAuthCodeRequest() : TemporaryAuthCodeRequest(nullptr) {}
  ~TemporaryAuthCodeRequest() override;
  explicit constexpr TemporaryAuthCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TemporaryAuthCodeRequest(const TemporaryAuthCodeRequest& from);
  TemporaryAuthCodeRequest(TemporaryAuthCodeRequest&& from) noexcept
    : TemporaryAuthCodeRequest() {
    *this = ::std::move(from);
  }

  inline TemporaryAuthCodeRequest& operator=(const TemporaryAuthCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporaryAuthCodeRequest& operator=(TemporaryAuthCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporaryAuthCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporaryAuthCodeRequest* internal_default_instance() {
    return reinterpret_cast<const TemporaryAuthCodeRequest*>(
               &_TemporaryAuthCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TemporaryAuthCodeRequest& a, TemporaryAuthCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TemporaryAuthCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporaryAuthCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporaryAuthCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TemporaryAuthCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TemporaryAuthCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TemporaryAuthCodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemporaryAuthCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest";
  }
  protected:
  explicit TemporaryAuthCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kApplicationNameFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string applicationName = 2;
  void clear_applicationname();
  const std::string& applicationname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applicationname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applicationname();
  PROTOBUF_NODISCARD std::string* release_applicationname();
  void set_allocated_applicationname(std::string* applicationname);
  private:
  const std::string& _internal_applicationname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applicationname(const std::string& value);
  std::string* _internal_mutable_applicationname();
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class TemporaryAuthCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse) */ {
 public:
  inline TemporaryAuthCodeResponse() : TemporaryAuthCodeResponse(nullptr) {}
  ~TemporaryAuthCodeResponse() override;
  explicit constexpr TemporaryAuthCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TemporaryAuthCodeResponse(const TemporaryAuthCodeResponse& from);
  TemporaryAuthCodeResponse(TemporaryAuthCodeResponse&& from) noexcept
    : TemporaryAuthCodeResponse() {
    *this = ::std::move(from);
  }

  inline TemporaryAuthCodeResponse& operator=(const TemporaryAuthCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TemporaryAuthCodeResponse& operator=(TemporaryAuthCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TemporaryAuthCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TemporaryAuthCodeResponse* internal_default_instance() {
    return reinterpret_cast<const TemporaryAuthCodeResponse*>(
               &_TemporaryAuthCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TemporaryAuthCodeResponse& a, TemporaryAuthCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TemporaryAuthCodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TemporaryAuthCodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TemporaryAuthCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TemporaryAuthCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TemporaryAuthCodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TemporaryAuthCodeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemporaryAuthCodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse";
  }
  protected:
  explicit TemporaryAuthCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemporaryCodeFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string temporaryCode = 2;
  void clear_temporarycode();
  const std::string& temporarycode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_temporarycode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_temporarycode();
  PROTOBUF_NODISCARD std::string* release_temporarycode();
  void set_allocated_temporarycode(std::string* temporarycode);
  private:
  const std::string& _internal_temporarycode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_temporarycode(const std::string& value);
  std::string* _internal_mutable_temporarycode();
  public:

  // .Avanpost.Sso.Agent.Grpc.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Avanpost::Sso::Agent::Grpc::Result& result() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::Result* release_result();
  ::Avanpost::Sso::Agent::Grpc::Result* mutable_result();
  void set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result);
  private:
  const ::Avanpost::Sso::Agent::Grpc::Result& _internal_result() const;
  ::Avanpost::Sso::Agent::Grpc::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Avanpost::Sso::Agent::Grpc::Result* result);
  ::Avanpost::Sso::Agent::Grpc::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr temporarycode_;
  ::Avanpost::Sso::Agent::Grpc::Result* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class UserApplicationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse) */ {
 public:
  inline UserApplicationsResponse() : UserApplicationsResponse(nullptr) {}
  ~UserApplicationsResponse() override;
  explicit constexpr UserApplicationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserApplicationsResponse(const UserApplicationsResponse& from);
  UserApplicationsResponse(UserApplicationsResponse&& from) noexcept
    : UserApplicationsResponse() {
    *this = ::std::move(from);
  }

  inline UserApplicationsResponse& operator=(const UserApplicationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserApplicationsResponse& operator=(UserApplicationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserApplicationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserApplicationsResponse* internal_default_instance() {
    return reinterpret_cast<const UserApplicationsResponse*>(
               &_UserApplicationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserApplicationsResponse& a, UserApplicationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserApplicationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserApplicationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserApplicationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserApplicationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserApplicationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserApplicationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserApplicationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.UserApplicationsResponse";
  }
  protected:
  explicit UserApplicationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .Avanpost.Sso.Agent.Grpc.Application applications = 2;
  int applications_size() const;
  private:
  int _internal_applications_size() const;
  public:
  void clear_applications();
  ::Avanpost::Sso::Agent::Grpc::Application* mutable_applications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::Application >*
      mutable_applications();
  private:
  const ::Avanpost::Sso::Agent::Grpc::Application& _internal_applications(int index) const;
  ::Avanpost::Sso::Agent::Grpc::Application* _internal_add_applications();
  public:
  const ::Avanpost::Sso::Agent::Grpc::Application& applications(int index) const;
  ::Avanpost::Sso::Agent::Grpc::Application* add_applications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::Application >&
      applications() const;

  // .Avanpost.Sso.Agent.Grpc.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Avanpost::Sso::Agent::Grpc::Result& result() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::Result* release_result();
  ::Avanpost::Sso::Agent::Grpc::Result* mutable_result();
  void set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result);
  private:
  const ::Avanpost::Sso::Agent::Grpc::Result& _internal_result() const;
  ::Avanpost::Sso::Agent::Grpc::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Avanpost::Sso::Agent::Grpc::Result* result);
  ::Avanpost::Sso::Agent::Grpc::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::Application > applications_;
  ::Avanpost::Sso::Agent::Grpc::Result* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class Application final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.Application) */ {
 public:
  inline Application() : Application(nullptr) {}
  ~Application() override;
  explicit constexpr Application(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Application(const Application& from);
  Application(Application&& from) noexcept
    : Application() {
    *this = ::std::move(from);
  }

  inline Application& operator=(const Application& from) {
    CopyFrom(from);
    return *this;
  }
  inline Application& operator=(Application&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Application& default_instance() {
    return *internal_default_instance();
  }
  static inline const Application* internal_default_instance() {
    return reinterpret_cast<const Application*>(
               &_Application_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Application& a, Application& b) {
    a.Swap(&b);
  }
  inline void Swap(Application* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Application* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Application* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Application>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Application& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Application& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Application* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.Application";
  }
  protected:
  explicit Application(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIDFieldNumber = 1,
    kApplicationNameFieldNumber = 2,
    kCommandsFieldNumber = 3,
    kPasswordPolicyFieldNumber = 6,
    kAllowUserManageCredentialsFieldNumber = 4,
    kServerPasswordGenerationFieldNumber = 5,
  };
  // string applicationID = 1;
  void clear_applicationid();
  const std::string& applicationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applicationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applicationid();
  PROTOBUF_NODISCARD std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // string applicationName = 2;
  void clear_applicationname();
  const std::string& applicationname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applicationname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applicationname();
  PROTOBUF_NODISCARD std::string* release_applicationname();
  void set_allocated_applicationname(std::string* applicationname);
  private:
  const std::string& _internal_applicationname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applicationname(const std::string& value);
  std::string* _internal_mutable_applicationname();
  public:

  // string commands = 3;
  void clear_commands();
  const std::string& commands() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commands(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commands();
  PROTOBUF_NODISCARD std::string* release_commands();
  void set_allocated_commands(std::string* commands);
  private:
  const std::string& _internal_commands() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commands(const std::string& value);
  std::string* _internal_mutable_commands();
  public:

  // string passwordPolicy = 6;
  void clear_passwordpolicy();
  const std::string& passwordpolicy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwordpolicy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwordpolicy();
  PROTOBUF_NODISCARD std::string* release_passwordpolicy();
  void set_allocated_passwordpolicy(std::string* passwordpolicy);
  private:
  const std::string& _internal_passwordpolicy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwordpolicy(const std::string& value);
  std::string* _internal_mutable_passwordpolicy();
  public:

  // bool allowUserManageCredentials = 4;
  void clear_allowusermanagecredentials();
  bool allowusermanagecredentials() const;
  void set_allowusermanagecredentials(bool value);
  private:
  bool _internal_allowusermanagecredentials() const;
  void _internal_set_allowusermanagecredentials(bool value);
  public:

  // bool serverPasswordGeneration = 5;
  void clear_serverpasswordgeneration();
  bool serverpasswordgeneration() const;
  void set_serverpasswordgeneration(bool value);
  private:
  bool _internal_serverpasswordgeneration() const;
  void _internal_set_serverpasswordgeneration(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.Application)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwordpolicy_;
  bool allowusermanagecredentials_;
  bool serverpasswordgeneration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class UserCredentials final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.UserCredentials) */ {
 public:
  inline UserCredentials() : UserCredentials(nullptr) {}
  ~UserCredentials() override;
  explicit constexpr UserCredentials(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserCredentials(const UserCredentials& from);
  UserCredentials(UserCredentials&& from) noexcept
    : UserCredentials() {
    *this = ::std::move(from);
  }

  inline UserCredentials& operator=(const UserCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserCredentials& operator=(UserCredentials&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserCredentials& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserCredentials* internal_default_instance() {
    return reinterpret_cast<const UserCredentials*>(
               &_UserCredentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserCredentials& a, UserCredentials& b) {
    a.Swap(&b);
  }
  inline void Swap(UserCredentials* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserCredentials* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserCredentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserCredentials>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserCredentials& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserCredentials& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserCredentials* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.UserCredentials";
  }
  protected:
  explicit UserCredentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIDFieldNumber = 1,
    kUserFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kDomainFieldNumber = 4,
    kCommentFieldNumber = 5,
    kCredentialsIDFieldNumber = 6,
  };
  // string applicationID = 1;
  void clear_applicationid();
  const std::string& applicationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applicationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applicationid();
  PROTOBUF_NODISCARD std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // string user = 2;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string domain = 4;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string comment = 5;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string credentialsID = 6;
  void clear_credentialsid();
  const std::string& credentialsid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_credentialsid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_credentialsid();
  PROTOBUF_NODISCARD std::string* release_credentialsid();
  void set_allocated_credentialsid(std::string* credentialsid);
  private:
  const std::string& _internal_credentialsid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_credentialsid(const std::string& value);
  std::string* _internal_mutable_credentialsid();
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.UserCredentials)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credentialsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class AgentChannelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.AgentChannelMessage) */ {
 public:
  inline AgentChannelMessage() : AgentChannelMessage(nullptr) {}
  ~AgentChannelMessage() override;
  explicit constexpr AgentChannelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentChannelMessage(const AgentChannelMessage& from);
  AgentChannelMessage(AgentChannelMessage&& from) noexcept
    : AgentChannelMessage() {
    *this = ::std::move(from);
  }

  inline AgentChannelMessage& operator=(const AgentChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentChannelMessage& operator=(AgentChannelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentChannelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentChannelMessage* internal_default_instance() {
    return reinterpret_cast<const AgentChannelMessage*>(
               &_AgentChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AgentChannelMessage& a, AgentChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentChannelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentChannelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentChannelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgentChannelMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentChannelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.AgentChannelMessage";
  }
  protected:
  explicit AgentChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kResultFieldNumber = 1,
    kAuthenticationFactorFieldNumber = 3,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .Avanpost.Sso.Agent.Grpc.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Avanpost::Sso::Agent::Grpc::Result& result() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::Result* release_result();
  ::Avanpost::Sso::Agent::Grpc::Result* mutable_result();
  void set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result);
  private:
  const ::Avanpost::Sso::Agent::Grpc::Result& _internal_result() const;
  ::Avanpost::Sso::Agent::Grpc::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Avanpost::Sso::Agent::Grpc::Result* result);
  ::Avanpost::Sso::Agent::Grpc::Result* unsafe_arena_release_result();

  // .Avanpost.Sso.Agent.Grpc.AuthenticationFactor authenticationFactor = 3;
  bool has_authenticationfactor() const;
  private:
  bool _internal_has_authenticationfactor() const;
  public:
  void clear_authenticationfactor();
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& authenticationfactor() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* release_authenticationfactor();
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* mutable_authenticationfactor();
  void set_allocated_authenticationfactor(::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor);
  private:
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& _internal_authenticationfactor() const;
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* _internal_mutable_authenticationfactor();
  public:
  void unsafe_arena_set_allocated_authenticationfactor(
      ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor);
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* unsafe_arena_release_authenticationfactor();

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.AgentChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::Avanpost::Sso::Agent::Grpc::Result* result_;
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationFactor_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthenticationFactor_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthenticationFactor_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AuthenticationFactor_MetadataEntry_DoNotUse();
  explicit constexpr AuthenticationFactor_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AuthenticationFactor_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AuthenticationFactor_MetadataEntry_DoNotUse& other);
  static const AuthenticationFactor_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AuthenticationFactor_MetadataEntry_DoNotUse*>(&_AuthenticationFactor_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Avanpost.Sso.Agent.Grpc.AuthenticationFactor.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Avanpost.Sso.Agent.Grpc.AuthenticationFactor.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AuthenticationFactor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.AuthenticationFactor) */ {
 public:
  inline AuthenticationFactor() : AuthenticationFactor(nullptr) {}
  ~AuthenticationFactor() override;
  explicit constexpr AuthenticationFactor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationFactor(const AuthenticationFactor& from);
  AuthenticationFactor(AuthenticationFactor&& from) noexcept
    : AuthenticationFactor() {
    *this = ::std::move(from);
  }

  inline AuthenticationFactor& operator=(const AuthenticationFactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationFactor& operator=(AuthenticationFactor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationFactor& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationFactor* internal_default_instance() {
    return reinterpret_cast<const AuthenticationFactor*>(
               &_AuthenticationFactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AuthenticationFactor& a, AuthenticationFactor& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationFactor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationFactor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationFactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationFactor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationFactor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticationFactor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationFactor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.AuthenticationFactor";
  }
  protected:
  explicit AuthenticationFactor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kFactorFieldNumber = 1,
  };
  // map<string, string> metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // .Avanpost.Sso.Agent.Grpc.FactorType factor = 1;
  void clear_factor();
  ::Avanpost::Sso::Agent::Grpc::FactorType factor() const;
  void set_factor(::Avanpost::Sso::Agent::Grpc::FactorType value);
  private:
  ::Avanpost::Sso::Agent::Grpc::FactorType _internal_factor() const;
  void _internal_set_factor(::Avanpost::Sso::Agent::Grpc::FactorType value);
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.AuthenticationFactor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AuthenticationFactor_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  int factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class ServerChannelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.ServerChannelMessage) */ {
 public:
  inline ServerChannelMessage() : ServerChannelMessage(nullptr) {}
  ~ServerChannelMessage() override;
  explicit constexpr ServerChannelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerChannelMessage(const ServerChannelMessage& from);
  ServerChannelMessage(ServerChannelMessage&& from) noexcept
    : ServerChannelMessage() {
    *this = ::std::move(from);
  }

  inline ServerChannelMessage& operator=(const ServerChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerChannelMessage& operator=(ServerChannelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerChannelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerChannelMessage* internal_default_instance() {
    return reinterpret_cast<const ServerChannelMessage*>(
               &_ServerChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ServerChannelMessage& a, ServerChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerChannelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerChannelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerChannelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerChannelMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerChannelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.ServerChannelMessage";
  }
  protected:
  explicit ServerChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthenticationFactorFieldNumber = 1,
  };
  // .Avanpost.Sso.Agent.Grpc.AuthenticationFactor authenticationFactor = 1;
  bool has_authenticationfactor() const;
  private:
  bool _internal_has_authenticationfactor() const;
  public:
  void clear_authenticationfactor();
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& authenticationfactor() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* release_authenticationfactor();
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* mutable_authenticationfactor();
  void set_allocated_authenticationfactor(::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor);
  private:
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& _internal_authenticationfactor() const;
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* _internal_mutable_authenticationfactor();
  public:
  void unsafe_arena_set_allocated_authenticationfactor(
      ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor);
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* unsafe_arena_release_authenticationfactor();

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.ServerChannelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class ApplicationFactorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest) */ {
 public:
  inline ApplicationFactorRequest() : ApplicationFactorRequest(nullptr) {}
  ~ApplicationFactorRequest() override;
  explicit constexpr ApplicationFactorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplicationFactorRequest(const ApplicationFactorRequest& from);
  ApplicationFactorRequest(ApplicationFactorRequest&& from) noexcept
    : ApplicationFactorRequest() {
    *this = ::std::move(from);
  }

  inline ApplicationFactorRequest& operator=(const ApplicationFactorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationFactorRequest& operator=(ApplicationFactorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplicationFactorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplicationFactorRequest* internal_default_instance() {
    return reinterpret_cast<const ApplicationFactorRequest*>(
               &_ApplicationFactorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ApplicationFactorRequest& a, ApplicationFactorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationFactorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplicationFactorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApplicationFactorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApplicationFactorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplicationFactorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApplicationFactorRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationFactorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest";
  }
  protected:
  explicit ApplicationFactorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kApplicationIDFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string applicationID = 2;
  void clear_applicationid();
  const std::string& applicationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applicationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applicationid();
  PROTOBUF_NODISCARD std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class FactorListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.FactorListResponse) */ {
 public:
  inline FactorListResponse() : FactorListResponse(nullptr) {}
  ~FactorListResponse() override;
  explicit constexpr FactorListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FactorListResponse(const FactorListResponse& from);
  FactorListResponse(FactorListResponse&& from) noexcept
    : FactorListResponse() {
    *this = ::std::move(from);
  }

  inline FactorListResponse& operator=(const FactorListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FactorListResponse& operator=(FactorListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FactorListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FactorListResponse* internal_default_instance() {
    return reinterpret_cast<const FactorListResponse*>(
               &_FactorListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FactorListResponse& a, FactorListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FactorListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FactorListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FactorListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FactorListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FactorListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FactorListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FactorListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.FactorListResponse";
  }
  protected:
  explicit FactorListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFactorsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .Avanpost.Sso.Agent.Grpc.AuthenticationFactor factors = 2;
  int factors_size() const;
  private:
  int _internal_factors_size() const;
  public:
  void clear_factors();
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* mutable_factors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor >*
      mutable_factors();
  private:
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& _internal_factors(int index) const;
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* _internal_add_factors();
  public:
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& factors(int index) const;
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* add_factors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor >&
      factors() const;

  // .Avanpost.Sso.Agent.Grpc.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Avanpost::Sso::Agent::Grpc::Result& result() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::Result* release_result();
  ::Avanpost::Sso::Agent::Grpc::Result* mutable_result();
  void set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result);
  private:
  const ::Avanpost::Sso::Agent::Grpc::Result& _internal_result() const;
  ::Avanpost::Sso::Agent::Grpc::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Avanpost::Sso::Agent::Grpc::Result* result);
  ::Avanpost::Sso::Agent::Grpc::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.FactorListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor > factors_;
  ::Avanpost::Sso::Agent::Grpc::Result* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class FactorBindingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.FactorBindingRequest) */ {
 public:
  inline FactorBindingRequest() : FactorBindingRequest(nullptr) {}
  ~FactorBindingRequest() override;
  explicit constexpr FactorBindingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FactorBindingRequest(const FactorBindingRequest& from);
  FactorBindingRequest(FactorBindingRequest&& from) noexcept
    : FactorBindingRequest() {
    *this = ::std::move(from);
  }

  inline FactorBindingRequest& operator=(const FactorBindingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FactorBindingRequest& operator=(FactorBindingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FactorBindingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FactorBindingRequest* internal_default_instance() {
    return reinterpret_cast<const FactorBindingRequest*>(
               &_FactorBindingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FactorBindingRequest& a, FactorBindingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FactorBindingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FactorBindingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FactorBindingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FactorBindingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FactorBindingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FactorBindingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FactorBindingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.FactorBindingRequest";
  }
  protected:
  explicit FactorBindingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kAuthenticationFactorFieldNumber = 2,
    kOperationFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .Avanpost.Sso.Agent.Grpc.AuthenticationFactor authenticationFactor = 2;
  bool has_authenticationfactor() const;
  private:
  bool _internal_has_authenticationfactor() const;
  public:
  void clear_authenticationfactor();
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& authenticationfactor() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* release_authenticationfactor();
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* mutable_authenticationfactor();
  void set_allocated_authenticationfactor(::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor);
  private:
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& _internal_authenticationfactor() const;
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* _internal_mutable_authenticationfactor();
  public:
  void unsafe_arena_set_allocated_authenticationfactor(
      ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor);
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* unsafe_arena_release_authenticationfactor();

  // .Avanpost.Sso.Agent.Grpc.BindingOperation operation = 3;
  void clear_operation();
  ::Avanpost::Sso::Agent::Grpc::BindingOperation operation() const;
  void set_operation(::Avanpost::Sso::Agent::Grpc::BindingOperation value);
  private:
  ::Avanpost::Sso::Agent::Grpc::BindingOperation _internal_operation() const;
  void _internal_set_operation(::Avanpost::Sso::Agent::Grpc::BindingOperation value);
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.FactorBindingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthenticationRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthenticationRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AuthenticationRequest_MetadataEntry_DoNotUse();
  explicit constexpr AuthenticationRequest_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AuthenticationRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AuthenticationRequest_MetadataEntry_DoNotUse& other);
  static const AuthenticationRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AuthenticationRequest_MetadataEntry_DoNotUse*>(&_AuthenticationRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Avanpost.Sso.Agent.Grpc.AuthenticationRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Avanpost.Sso.Agent.Grpc.AuthenticationRequest.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AuthenticationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.AuthenticationRequest) */ {
 public:
  inline AuthenticationRequest() : AuthenticationRequest(nullptr) {}
  ~AuthenticationRequest() override;
  explicit constexpr AuthenticationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationRequest(const AuthenticationRequest& from);
  AuthenticationRequest(AuthenticationRequest&& from) noexcept
    : AuthenticationRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticationRequest& operator=(const AuthenticationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationRequest& operator=(AuthenticationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticationRequest*>(
               &_AuthenticationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AuthenticationRequest& a, AuthenticationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.AuthenticationRequest";
  }
  protected:
  explicit AuthenticationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 7,
    kUsernameFieldNumber = 1,
    kPasscodeFieldNumber = 2,
    kStateFieldNumber = 3,
    kSessionIDFieldNumber = 4,
    kApplicationIDFieldNumber = 5,
    kFactorFieldNumber = 6,
  };
  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string passcode = 2;
  void clear_passcode();
  const std::string& passcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passcode();
  PROTOBUF_NODISCARD std::string* release_passcode();
  void set_allocated_passcode(std::string* passcode);
  private:
  const std::string& _internal_passcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passcode(const std::string& value);
  std::string* _internal_mutable_passcode();
  public:

  // string state = 3;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string sessionID = 4;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string applicationID = 5;
  void clear_applicationid();
  const std::string& applicationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applicationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applicationid();
  PROTOBUF_NODISCARD std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // .Avanpost.Sso.Agent.Grpc.FactorType factor = 6;
  void clear_factor();
  ::Avanpost::Sso::Agent::Grpc::FactorType factor() const;
  void set_factor(::Avanpost::Sso::Agent::Grpc::FactorType value);
  private:
  ::Avanpost::Sso::Agent::Grpc::FactorType _internal_factor() const;
  void _internal_set_factor(::Avanpost::Sso::Agent::Grpc::FactorType value);
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.AuthenticationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AuthenticationRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  int factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationResponse_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthenticationResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AuthenticationResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AuthenticationResponse_MetadataEntry_DoNotUse();
  explicit constexpr AuthenticationResponse_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AuthenticationResponse_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AuthenticationResponse_MetadataEntry_DoNotUse& other);
  static const AuthenticationResponse_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AuthenticationResponse_MetadataEntry_DoNotUse*>(&_AuthenticationResponse_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Avanpost.Sso.Agent.Grpc.AuthenticationResponse.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Avanpost.Sso.Agent.Grpc.AuthenticationResponse.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AuthenticationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.AuthenticationResponse) */ {
 public:
  inline AuthenticationResponse() : AuthenticationResponse(nullptr) {}
  ~AuthenticationResponse() override;
  explicit constexpr AuthenticationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationResponse(const AuthenticationResponse& from);
  AuthenticationResponse(AuthenticationResponse&& from) noexcept
    : AuthenticationResponse() {
    *this = ::std::move(from);
  }

  inline AuthenticationResponse& operator=(const AuthenticationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationResponse& operator=(AuthenticationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticationResponse*>(
               &_AuthenticationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AuthenticationResponse& a, AuthenticationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.AuthenticationResponse";
  }
  protected:
  explicit AuthenticationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFactorsFieldNumber = 2,
    kMetadataFieldNumber = 7,
    kCredentialsFieldNumber = 8,
    kStateFieldNumber = 3,
    kSessionIDFieldNumber = 5,
    kTokenFieldNumber = 6,
    kStatusFieldNumber = 1,
    kRemainingAttemptsCountFieldNumber = 9,
  };
  // repeated .Avanpost.Sso.Agent.Grpc.FactorType factors = 2;
  int factors_size() const;
  private:
  int _internal_factors_size() const;
  public:
  void clear_factors();
  private:
  ::Avanpost::Sso::Agent::Grpc::FactorType _internal_factors(int index) const;
  void _internal_add_factors(::Avanpost::Sso::Agent::Grpc::FactorType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_factors();
  public:
  ::Avanpost::Sso::Agent::Grpc::FactorType factors(int index) const;
  void set_factors(int index, ::Avanpost::Sso::Agent::Grpc::FactorType value);
  void add_factors(::Avanpost::Sso::Agent::Grpc::FactorType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& factors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_factors();

  // map<string, string> metadata = 7;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // repeated .Avanpost.Sso.Agent.Grpc.UserCredentials credentials = 8;
  int credentials_size() const;
  private:
  int _internal_credentials_size() const;
  public:
  void clear_credentials();
  ::Avanpost::Sso::Agent::Grpc::UserCredentials* mutable_credentials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::UserCredentials >*
      mutable_credentials();
  private:
  const ::Avanpost::Sso::Agent::Grpc::UserCredentials& _internal_credentials(int index) const;
  ::Avanpost::Sso::Agent::Grpc::UserCredentials* _internal_add_credentials();
  public:
  const ::Avanpost::Sso::Agent::Grpc::UserCredentials& credentials(int index) const;
  ::Avanpost::Sso::Agent::Grpc::UserCredentials* add_credentials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::UserCredentials >&
      credentials() const;

  // string state = 3;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string sessionID = 5;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string token = 6;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .Avanpost.Sso.Agent.Grpc.AuthenticationStatus status = 1;
  void clear_status();
  ::Avanpost::Sso::Agent::Grpc::AuthenticationStatus status() const;
  void set_status(::Avanpost::Sso::Agent::Grpc::AuthenticationStatus value);
  private:
  ::Avanpost::Sso::Agent::Grpc::AuthenticationStatus _internal_status() const;
  void _internal_set_status(::Avanpost::Sso::Agent::Grpc::AuthenticationStatus value);
  public:

  // int32 remainingAttemptsCount = 9;
  void clear_remainingattemptscount();
  int32_t remainingattemptscount() const;
  void set_remainingattemptscount(int32_t value);
  private:
  int32_t _internal_remainingattemptscount() const;
  void _internal_set_remainingattemptscount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.AuthenticationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> factors_;
  mutable std::atomic<int> _factors_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AuthenticationResponse_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::UserCredentials > credentials_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int status_;
  int32_t remainingattemptscount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest) */ {
 public:
  inline ChangePasswordRequest() : ChangePasswordRequest(nullptr) {}
  ~ChangePasswordRequest() override;
  explicit constexpr ChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangePasswordRequest(const ChangePasswordRequest& from);
  ChangePasswordRequest(ChangePasswordRequest&& from) noexcept
    : ChangePasswordRequest() {
    *this = ::std::move(from);
  }

  inline ChangePasswordRequest& operator=(const ChangePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordRequest& operator=(ChangePasswordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangePasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangePasswordRequest* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordRequest*>(
               &_ChangePasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ChangePasswordRequest& a, ChangePasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePasswordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangePasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangePasswordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangePasswordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangePasswordRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePasswordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.ChangePasswordRequest";
  }
  protected:
  explicit ChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kOldPasswordFieldNumber = 2,
    kNewPasswordFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string oldPassword = 2;
  void clear_oldpassword();
  const std::string& oldpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldpassword();
  PROTOBUF_NODISCARD std::string* release_oldpassword();
  void set_allocated_oldpassword(std::string* oldpassword);
  private:
  const std::string& _internal_oldpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldpassword(const std::string& value);
  std::string* _internal_mutable_oldpassword();
  public:

  // string newPassword = 3;
  void clear_newpassword();
  const std::string& newpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newpassword();
  PROTOBUF_NODISCARD std::string* release_newpassword();
  void set_allocated_newpassword(std::string* newpassword);
  private:
  const std::string& _internal_newpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newpassword(const std::string& value);
  std::string* _internal_mutable_newpassword();
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldpassword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newpassword_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.ChangePasswordResponse) */ {
 public:
  inline ChangePasswordResponse() : ChangePasswordResponse(nullptr) {}
  ~ChangePasswordResponse() override;
  explicit constexpr ChangePasswordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangePasswordResponse(const ChangePasswordResponse& from);
  ChangePasswordResponse(ChangePasswordResponse&& from) noexcept
    : ChangePasswordResponse() {
    *this = ::std::move(from);
  }

  inline ChangePasswordResponse& operator=(const ChangePasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordResponse& operator=(ChangePasswordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangePasswordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangePasswordResponse* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordResponse*>(
               &_ChangePasswordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ChangePasswordResponse& a, ChangePasswordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePasswordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangePasswordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangePasswordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangePasswordResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangePasswordResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePasswordResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.ChangePasswordResponse";
  }
  protected:
  explicit ChangePasswordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .Avanpost.Sso.Agent.Grpc.ChangePasswordStatus status = 1;
  void clear_status();
  ::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus status() const;
  void set_status(::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus value);
  private:
  ::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus _internal_status() const;
  void _internal_set_status(::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.ChangePasswordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class SessionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.SessionRequest) */ {
 public:
  inline SessionRequest() : SessionRequest(nullptr) {}
  ~SessionRequest() override;
  explicit constexpr SessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionRequest(const SessionRequest& from);
  SessionRequest(SessionRequest&& from) noexcept
    : SessionRequest() {
    *this = ::std::move(from);
  }

  inline SessionRequest& operator=(const SessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRequest& operator=(SessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionRequest* internal_default_instance() {
    return reinterpret_cast<const SessionRequest*>(
               &_SessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SessionRequest& a, SessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.SessionRequest";
  }
  protected:
  explicit SessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kApplicationIDFieldNumber = 3,
    kHandledFactorFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string applicationID = 3;
  void clear_applicationid();
  const std::string& applicationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applicationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applicationid();
  PROTOBUF_NODISCARD std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // .Avanpost.Sso.Agent.Grpc.FactorType handledFactor = 2;
  void clear_handledfactor();
  ::Avanpost::Sso::Agent::Grpc::FactorType handledfactor() const;
  void set_handledfactor(::Avanpost::Sso::Agent::Grpc::FactorType value);
  private:
  ::Avanpost::Sso::Agent::Grpc::FactorType _internal_handledfactor() const;
  void _internal_set_handledfactor(::Avanpost::Sso::Agent::Grpc::FactorType value);
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.SessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  int handledfactor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class SessionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.SessionResponse) */ {
 public:
  inline SessionResponse() : SessionResponse(nullptr) {}
  ~SessionResponse() override;
  explicit constexpr SessionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionResponse(const SessionResponse& from);
  SessionResponse(SessionResponse&& from) noexcept
    : SessionResponse() {
    *this = ::std::move(from);
  }

  inline SessionResponse& operator=(const SessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionResponse& operator=(SessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionResponse* internal_default_instance() {
    return reinterpret_cast<const SessionResponse*>(
               &_SessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SessionResponse& a, SessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.SessionResponse";
  }
  protected:
  explicit SessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIDFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string sessionID = 2;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // .Avanpost.Sso.Agent.Grpc.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Avanpost::Sso::Agent::Grpc::Result& result() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::Result* release_result();
  ::Avanpost::Sso::Agent::Grpc::Result* mutable_result();
  void set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result);
  private:
  const ::Avanpost::Sso::Agent::Grpc::Result& _internal_result() const;
  ::Avanpost::Sso::Agent::Grpc::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Avanpost::Sso::Agent::Grpc::Result* result);
  ::Avanpost::Sso::Agent::Grpc::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.SessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::Avanpost::Sso::Agent::Grpc::Result* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class SetUserCredentialRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest) */ {
 public:
  inline SetUserCredentialRequest() : SetUserCredentialRequest(nullptr) {}
  ~SetUserCredentialRequest() override;
  explicit constexpr SetUserCredentialRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUserCredentialRequest(const SetUserCredentialRequest& from);
  SetUserCredentialRequest(SetUserCredentialRequest&& from) noexcept
    : SetUserCredentialRequest() {
    *this = ::std::move(from);
  }

  inline SetUserCredentialRequest& operator=(const SetUserCredentialRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserCredentialRequest& operator=(SetUserCredentialRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUserCredentialRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUserCredentialRequest* internal_default_instance() {
    return reinterpret_cast<const SetUserCredentialRequest*>(
               &_SetUserCredentialRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetUserCredentialRequest& a, SetUserCredentialRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserCredentialRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserCredentialRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUserCredentialRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetUserCredentialRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetUserCredentialRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetUserCredentialRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserCredentialRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest";
  }
  protected:
  explicit SetUserCredentialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIDFieldNumber = 1,
    kCredentialIDFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kDomainFieldNumber = 5,
    kCommentFieldNumber = 6,
    kPasswordFieldNumber = 4,
  };
  // string applicationID = 1;
  void clear_applicationid();
  const std::string& applicationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applicationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applicationid();
  PROTOBUF_NODISCARD std::string* release_applicationid();
  void set_allocated_applicationid(std::string* applicationid);
  private:
  const std::string& _internal_applicationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applicationid(const std::string& value);
  std::string* _internal_mutable_applicationid();
  public:

  // string credentialID = 2;
  void clear_credentialid();
  const std::string& credentialid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_credentialid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_credentialid();
  PROTOBUF_NODISCARD std::string* release_credentialid();
  void set_allocated_credentialid(std::string* credentialid);
  private:
  const std::string& _internal_credentialid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_credentialid(const std::string& value);
  std::string* _internal_mutable_credentialid();
  public:

  // string username = 3;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string domain = 5;
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string comment = 6;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // .Avanpost.Sso.Agent.Grpc.PasswordInfo password = 4;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const ::Avanpost::Sso::Agent::Grpc::PasswordInfo& password() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::PasswordInfo* release_password();
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* mutable_password();
  void set_allocated_password(::Avanpost::Sso::Agent::Grpc::PasswordInfo* password);
  private:
  const ::Avanpost::Sso::Agent::Grpc::PasswordInfo& _internal_password() const;
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* _internal_mutable_password();
  public:
  void unsafe_arena_set_allocated_password(
      ::Avanpost::Sso::Agent::Grpc::PasswordInfo* password);
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* unsafe_arena_release_password();

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applicationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credentialid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class PasswordInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.PasswordInfo) */ {
 public:
  inline PasswordInfo() : PasswordInfo(nullptr) {}
  ~PasswordInfo() override;
  explicit constexpr PasswordInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordInfo(const PasswordInfo& from);
  PasswordInfo(PasswordInfo&& from) noexcept
    : PasswordInfo() {
    *this = ::std::move(from);
  }

  inline PasswordInfo& operator=(const PasswordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordInfo& operator=(PasswordInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasswordInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordInfo* internal_default_instance() {
    return reinterpret_cast<const PasswordInfo*>(
               &_PasswordInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PasswordInfo& a, PasswordInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PasswordInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PasswordInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PasswordInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasswordInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.PasswordInfo";
  }
  protected:
  explicit PasswordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
    kPasswordConfirmFieldNumber = 2,
  };
  // string password = 1;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string passwordConfirm = 2;
  void clear_passwordconfirm();
  const std::string& passwordconfirm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwordconfirm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwordconfirm();
  PROTOBUF_NODISCARD std::string* release_passwordconfirm();
  void set_allocated_passwordconfirm(std::string* passwordconfirm);
  private:
  const std::string& _internal_passwordconfirm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwordconfirm(const std::string& value);
  std::string* _internal_mutable_passwordconfirm();
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.PasswordInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwordconfirm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// -------------------------------------------------------------------

class SetUserCredentialResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse) */ {
 public:
  inline SetUserCredentialResponse() : SetUserCredentialResponse(nullptr) {}
  ~SetUserCredentialResponse() override;
  explicit constexpr SetUserCredentialResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUserCredentialResponse(const SetUserCredentialResponse& from);
  SetUserCredentialResponse(SetUserCredentialResponse&& from) noexcept
    : SetUserCredentialResponse() {
    *this = ::std::move(from);
  }

  inline SetUserCredentialResponse& operator=(const SetUserCredentialResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserCredentialResponse& operator=(SetUserCredentialResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUserCredentialResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUserCredentialResponse* internal_default_instance() {
    return reinterpret_cast<const SetUserCredentialResponse*>(
               &_SetUserCredentialResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetUserCredentialResponse& a, SetUserCredentialResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserCredentialResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserCredentialResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUserCredentialResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetUserCredentialResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetUserCredentialResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetUserCredentialResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserCredentialResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse";
  }
  protected:
  explicit SetUserCredentialResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorTextFieldNumber = 3,
    kPasswordFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string errorText = 3;
  void clear_errortext();
  const std::string& errortext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errortext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errortext();
  PROTOBUF_NODISCARD std::string* release_errortext();
  void set_allocated_errortext(std::string* errortext);
  private:
  const std::string& _internal_errortext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errortext(const std::string& value);
  std::string* _internal_mutable_errortext();
  public:

  // .Avanpost.Sso.Agent.Grpc.PasswordInfo password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const ::Avanpost::Sso::Agent::Grpc::PasswordInfo& password() const;
  PROTOBUF_NODISCARD ::Avanpost::Sso::Agent::Grpc::PasswordInfo* release_password();
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* mutable_password();
  void set_allocated_password(::Avanpost::Sso::Agent::Grpc::PasswordInfo* password);
  private:
  const ::Avanpost::Sso::Agent::Grpc::PasswordInfo& _internal_password() const;
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* _internal_mutable_password();
  public:
  void unsafe_arena_set_allocated_password(
      ::Avanpost::Sso::Agent::Grpc::PasswordInfo* password);
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* unsafe_arena_release_password();

  // .Avanpost.Sso.Agent.Grpc.SetUserCredentialStatus status = 1;
  void clear_status();
  ::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus status() const;
  void set_status(::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus value);
  private:
  ::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus _internal_status() const;
  void _internal_set_status(::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errortext_;
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* password_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agentcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Result

// bool isError = 1;
inline void Result::clear_iserror() {
  iserror_ = false;
}
inline bool Result::_internal_iserror() const {
  return iserror_;
}
inline bool Result::iserror() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.Result.isError)
  return _internal_iserror();
}
inline void Result::_internal_set_iserror(bool value) {
  
  iserror_ = value;
}
inline void Result::set_iserror(bool value) {
  _internal_set_iserror(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.Result.isError)
}

// string errorText = 2;
inline void Result::clear_errortext() {
  errortext_.ClearToEmpty();
}
inline const std::string& Result::errortext() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.Result.errorText)
  return _internal_errortext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_errortext(ArgT0&& arg0, ArgT... args) {
 
 errortext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.Result.errorText)
}
inline std::string* Result::mutable_errortext() {
  std::string* _s = _internal_mutable_errortext();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.Result.errorText)
  return _s;
}
inline const std::string& Result::_internal_errortext() const {
  return errortext_.Get();
}
inline void Result::_internal_set_errortext(const std::string& value) {
  
  errortext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_errortext() {
  
  return errortext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Result::release_errortext() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.Result.errorText)
  return errortext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Result::set_allocated_errortext(std::string* errortext) {
  if (errortext != nullptr) {
    
  } else {
    
  }
  errortext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errortext,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errortext_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errortext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.Result.errorText)
}

// -------------------------------------------------------------------

// UserRequest

// string username = 1;
inline void UserRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UserRequest::username() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.UserRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.UserRequest.username)
}
inline std::string* UserRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.UserRequest.username)
  return _s;
}
inline const std::string& UserRequest::_internal_username() const {
  return username_.Get();
}
inline void UserRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserRequest::release_username() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.UserRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.UserRequest.username)
}

// -------------------------------------------------------------------

// TemporaryAuthCodeRequest

// string username = 1;
inline void TemporaryAuthCodeRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& TemporaryAuthCodeRequest::username() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TemporaryAuthCodeRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.username)
}
inline std::string* TemporaryAuthCodeRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.username)
  return _s;
}
inline const std::string& TemporaryAuthCodeRequest::_internal_username() const {
  return username_.Get();
}
inline void TemporaryAuthCodeRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TemporaryAuthCodeRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TemporaryAuthCodeRequest::release_username() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TemporaryAuthCodeRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.username)
}

// string applicationName = 2;
inline void TemporaryAuthCodeRequest::clear_applicationname() {
  applicationname_.ClearToEmpty();
}
inline const std::string& TemporaryAuthCodeRequest::applicationname() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.applicationName)
  return _internal_applicationname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TemporaryAuthCodeRequest::set_applicationname(ArgT0&& arg0, ArgT... args) {
 
 applicationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.applicationName)
}
inline std::string* TemporaryAuthCodeRequest::mutable_applicationname() {
  std::string* _s = _internal_mutable_applicationname();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.applicationName)
  return _s;
}
inline const std::string& TemporaryAuthCodeRequest::_internal_applicationname() const {
  return applicationname_.Get();
}
inline void TemporaryAuthCodeRequest::_internal_set_applicationname(const std::string& value) {
  
  applicationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TemporaryAuthCodeRequest::_internal_mutable_applicationname() {
  
  return applicationname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TemporaryAuthCodeRequest::release_applicationname() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.applicationName)
  return applicationname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TemporaryAuthCodeRequest::set_allocated_applicationname(std::string* applicationname) {
  if (applicationname != nullptr) {
    
  } else {
    
  }
  applicationname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applicationname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applicationname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeRequest.applicationName)
}

// -------------------------------------------------------------------

// TemporaryAuthCodeResponse

// .Avanpost.Sso.Agent.Grpc.Result result = 1;
inline bool TemporaryAuthCodeResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool TemporaryAuthCodeResponse::has_result() const {
  return _internal_has_result();
}
inline void TemporaryAuthCodeResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& TemporaryAuthCodeResponse::_internal_result() const {
  const ::Avanpost::Sso::Agent::Grpc::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::Result&>(
      ::Avanpost::Sso::Agent::Grpc::_Result_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& TemporaryAuthCodeResponse::result() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.result)
  return _internal_result();
}
inline void TemporaryAuthCodeResponse::unsafe_arena_set_allocated_result(
    ::Avanpost::Sso::Agent::Grpc::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.result)
}
inline ::Avanpost::Sso::Agent::Grpc::Result* TemporaryAuthCodeResponse::release_result() {
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* TemporaryAuthCodeResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.result)
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* TemporaryAuthCodeResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* TemporaryAuthCodeResponse::mutable_result() {
  ::Avanpost::Sso::Agent::Grpc::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.result)
  return _msg;
}
inline void TemporaryAuthCodeResponse::set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::Result>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.result)
}

// string temporaryCode = 2;
inline void TemporaryAuthCodeResponse::clear_temporarycode() {
  temporarycode_.ClearToEmpty();
}
inline const std::string& TemporaryAuthCodeResponse::temporarycode() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.temporaryCode)
  return _internal_temporarycode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TemporaryAuthCodeResponse::set_temporarycode(ArgT0&& arg0, ArgT... args) {
 
 temporarycode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.temporaryCode)
}
inline std::string* TemporaryAuthCodeResponse::mutable_temporarycode() {
  std::string* _s = _internal_mutable_temporarycode();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.temporaryCode)
  return _s;
}
inline const std::string& TemporaryAuthCodeResponse::_internal_temporarycode() const {
  return temporarycode_.Get();
}
inline void TemporaryAuthCodeResponse::_internal_set_temporarycode(const std::string& value) {
  
  temporarycode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TemporaryAuthCodeResponse::_internal_mutable_temporarycode() {
  
  return temporarycode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TemporaryAuthCodeResponse::release_temporarycode() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.temporaryCode)
  return temporarycode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TemporaryAuthCodeResponse::set_allocated_temporarycode(std::string* temporarycode) {
  if (temporarycode != nullptr) {
    
  } else {
    
  }
  temporarycode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), temporarycode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (temporarycode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    temporarycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.TemporaryAuthCodeResponse.temporaryCode)
}

// -------------------------------------------------------------------

// UserApplicationsResponse

// .Avanpost.Sso.Agent.Grpc.Result result = 1;
inline bool UserApplicationsResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UserApplicationsResponse::has_result() const {
  return _internal_has_result();
}
inline void UserApplicationsResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& UserApplicationsResponse::_internal_result() const {
  const ::Avanpost::Sso::Agent::Grpc::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::Result&>(
      ::Avanpost::Sso::Agent::Grpc::_Result_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& UserApplicationsResponse::result() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.result)
  return _internal_result();
}
inline void UserApplicationsResponse::unsafe_arena_set_allocated_result(
    ::Avanpost::Sso::Agent::Grpc::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.result)
}
inline ::Avanpost::Sso::Agent::Grpc::Result* UserApplicationsResponse::release_result() {
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* UserApplicationsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.result)
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* UserApplicationsResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* UserApplicationsResponse::mutable_result() {
  ::Avanpost::Sso::Agent::Grpc::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.result)
  return _msg;
}
inline void UserApplicationsResponse::set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::Result>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.result)
}

// repeated .Avanpost.Sso.Agent.Grpc.Application applications = 2;
inline int UserApplicationsResponse::_internal_applications_size() const {
  return applications_.size();
}
inline int UserApplicationsResponse::applications_size() const {
  return _internal_applications_size();
}
inline void UserApplicationsResponse::clear_applications() {
  applications_.Clear();
}
inline ::Avanpost::Sso::Agent::Grpc::Application* UserApplicationsResponse::mutable_applications(int index) {
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.applications)
  return applications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::Application >*
UserApplicationsResponse::mutable_applications() {
  // @@protoc_insertion_point(field_mutable_list:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.applications)
  return &applications_;
}
inline const ::Avanpost::Sso::Agent::Grpc::Application& UserApplicationsResponse::_internal_applications(int index) const {
  return applications_.Get(index);
}
inline const ::Avanpost::Sso::Agent::Grpc::Application& UserApplicationsResponse::applications(int index) const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.applications)
  return _internal_applications(index);
}
inline ::Avanpost::Sso::Agent::Grpc::Application* UserApplicationsResponse::_internal_add_applications() {
  return applications_.Add();
}
inline ::Avanpost::Sso::Agent::Grpc::Application* UserApplicationsResponse::add_applications() {
  ::Avanpost::Sso::Agent::Grpc::Application* _add = _internal_add_applications();
  // @@protoc_insertion_point(field_add:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.applications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::Application >&
UserApplicationsResponse::applications() const {
  // @@protoc_insertion_point(field_list:Avanpost.Sso.Agent.Grpc.UserApplicationsResponse.applications)
  return applications_;
}

// -------------------------------------------------------------------

// Application

// string applicationID = 1;
inline void Application::clear_applicationid() {
  applicationid_.ClearToEmpty();
}
inline const std::string& Application::applicationid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.Application.applicationID)
  return _internal_applicationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Application::set_applicationid(ArgT0&& arg0, ArgT... args) {
 
 applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.Application.applicationID)
}
inline std::string* Application::mutable_applicationid() {
  std::string* _s = _internal_mutable_applicationid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.Application.applicationID)
  return _s;
}
inline const std::string& Application::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void Application::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Application::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Application::release_applicationid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.Application.applicationID)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Application::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applicationid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.Application.applicationID)
}

// string applicationName = 2;
inline void Application::clear_applicationname() {
  applicationname_.ClearToEmpty();
}
inline const std::string& Application::applicationname() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.Application.applicationName)
  return _internal_applicationname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Application::set_applicationname(ArgT0&& arg0, ArgT... args) {
 
 applicationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.Application.applicationName)
}
inline std::string* Application::mutable_applicationname() {
  std::string* _s = _internal_mutable_applicationname();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.Application.applicationName)
  return _s;
}
inline const std::string& Application::_internal_applicationname() const {
  return applicationname_.Get();
}
inline void Application::_internal_set_applicationname(const std::string& value) {
  
  applicationname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Application::_internal_mutable_applicationname() {
  
  return applicationname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Application::release_applicationname() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.Application.applicationName)
  return applicationname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Application::set_allocated_applicationname(std::string* applicationname) {
  if (applicationname != nullptr) {
    
  } else {
    
  }
  applicationname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applicationname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applicationname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.Application.applicationName)
}

// string commands = 3;
inline void Application::clear_commands() {
  commands_.ClearToEmpty();
}
inline const std::string& Application::commands() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.Application.commands)
  return _internal_commands();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Application::set_commands(ArgT0&& arg0, ArgT... args) {
 
 commands_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.Application.commands)
}
inline std::string* Application::mutable_commands() {
  std::string* _s = _internal_mutable_commands();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.Application.commands)
  return _s;
}
inline const std::string& Application::_internal_commands() const {
  return commands_.Get();
}
inline void Application::_internal_set_commands(const std::string& value) {
  
  commands_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Application::_internal_mutable_commands() {
  
  return commands_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Application::release_commands() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.Application.commands)
  return commands_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Application::set_allocated_commands(std::string* commands) {
  if (commands != nullptr) {
    
  } else {
    
  }
  commands_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commands,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (commands_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    commands_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.Application.commands)
}

// bool allowUserManageCredentials = 4;
inline void Application::clear_allowusermanagecredentials() {
  allowusermanagecredentials_ = false;
}
inline bool Application::_internal_allowusermanagecredentials() const {
  return allowusermanagecredentials_;
}
inline bool Application::allowusermanagecredentials() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.Application.allowUserManageCredentials)
  return _internal_allowusermanagecredentials();
}
inline void Application::_internal_set_allowusermanagecredentials(bool value) {
  
  allowusermanagecredentials_ = value;
}
inline void Application::set_allowusermanagecredentials(bool value) {
  _internal_set_allowusermanagecredentials(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.Application.allowUserManageCredentials)
}

// bool serverPasswordGeneration = 5;
inline void Application::clear_serverpasswordgeneration() {
  serverpasswordgeneration_ = false;
}
inline bool Application::_internal_serverpasswordgeneration() const {
  return serverpasswordgeneration_;
}
inline bool Application::serverpasswordgeneration() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.Application.serverPasswordGeneration)
  return _internal_serverpasswordgeneration();
}
inline void Application::_internal_set_serverpasswordgeneration(bool value) {
  
  serverpasswordgeneration_ = value;
}
inline void Application::set_serverpasswordgeneration(bool value) {
  _internal_set_serverpasswordgeneration(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.Application.serverPasswordGeneration)
}

// string passwordPolicy = 6;
inline void Application::clear_passwordpolicy() {
  passwordpolicy_.ClearToEmpty();
}
inline const std::string& Application::passwordpolicy() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.Application.passwordPolicy)
  return _internal_passwordpolicy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Application::set_passwordpolicy(ArgT0&& arg0, ArgT... args) {
 
 passwordpolicy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.Application.passwordPolicy)
}
inline std::string* Application::mutable_passwordpolicy() {
  std::string* _s = _internal_mutable_passwordpolicy();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.Application.passwordPolicy)
  return _s;
}
inline const std::string& Application::_internal_passwordpolicy() const {
  return passwordpolicy_.Get();
}
inline void Application::_internal_set_passwordpolicy(const std::string& value) {
  
  passwordpolicy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Application::_internal_mutable_passwordpolicy() {
  
  return passwordpolicy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Application::release_passwordpolicy() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.Application.passwordPolicy)
  return passwordpolicy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Application::set_allocated_passwordpolicy(std::string* passwordpolicy) {
  if (passwordpolicy != nullptr) {
    
  } else {
    
  }
  passwordpolicy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwordpolicy,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (passwordpolicy_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    passwordpolicy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.Application.passwordPolicy)
}

// -------------------------------------------------------------------

// UserCredentials

// string applicationID = 1;
inline void UserCredentials::clear_applicationid() {
  applicationid_.ClearToEmpty();
}
inline const std::string& UserCredentials::applicationid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.UserCredentials.applicationID)
  return _internal_applicationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserCredentials::set_applicationid(ArgT0&& arg0, ArgT... args) {
 
 applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.UserCredentials.applicationID)
}
inline std::string* UserCredentials::mutable_applicationid() {
  std::string* _s = _internal_mutable_applicationid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.UserCredentials.applicationID)
  return _s;
}
inline const std::string& UserCredentials::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void UserCredentials::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserCredentials::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserCredentials::release_applicationid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.UserCredentials.applicationID)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserCredentials::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applicationid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.UserCredentials.applicationID)
}

// string user = 2;
inline void UserCredentials::clear_user() {
  user_.ClearToEmpty();
}
inline const std::string& UserCredentials::user() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.UserCredentials.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserCredentials::set_user(ArgT0&& arg0, ArgT... args) {
 
 user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.UserCredentials.user)
}
inline std::string* UserCredentials::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.UserCredentials.user)
  return _s;
}
inline const std::string& UserCredentials::_internal_user() const {
  return user_.Get();
}
inline void UserCredentials::_internal_set_user(const std::string& value) {
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserCredentials::_internal_mutable_user() {
  
  return user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserCredentials::release_user() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.UserCredentials.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserCredentials::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.UserCredentials.user)
}

// string password = 3;
inline void UserCredentials::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& UserCredentials::password() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.UserCredentials.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserCredentials::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.UserCredentials.password)
}
inline std::string* UserCredentials::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.UserCredentials.password)
  return _s;
}
inline const std::string& UserCredentials::_internal_password() const {
  return password_.Get();
}
inline void UserCredentials::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserCredentials::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserCredentials::release_password() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.UserCredentials.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserCredentials::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.UserCredentials.password)
}

// string domain = 4;
inline void UserCredentials::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& UserCredentials::domain() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.UserCredentials.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserCredentials::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.UserCredentials.domain)
}
inline std::string* UserCredentials::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.UserCredentials.domain)
  return _s;
}
inline const std::string& UserCredentials::_internal_domain() const {
  return domain_.Get();
}
inline void UserCredentials::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserCredentials::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserCredentials::release_domain() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.UserCredentials.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserCredentials::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.UserCredentials.domain)
}

// string comment = 5;
inline void UserCredentials::clear_comment() {
  comment_.ClearToEmpty();
}
inline const std::string& UserCredentials::comment() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.UserCredentials.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserCredentials::set_comment(ArgT0&& arg0, ArgT... args) {
 
 comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.UserCredentials.comment)
}
inline std::string* UserCredentials::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.UserCredentials.comment)
  return _s;
}
inline const std::string& UserCredentials::_internal_comment() const {
  return comment_.Get();
}
inline void UserCredentials::_internal_set_comment(const std::string& value) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserCredentials::_internal_mutable_comment() {
  
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserCredentials::release_comment() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.UserCredentials.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserCredentials::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comment_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.UserCredentials.comment)
}

// string credentialsID = 6;
inline void UserCredentials::clear_credentialsid() {
  credentialsid_.ClearToEmpty();
}
inline const std::string& UserCredentials::credentialsid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.UserCredentials.credentialsID)
  return _internal_credentialsid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserCredentials::set_credentialsid(ArgT0&& arg0, ArgT... args) {
 
 credentialsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.UserCredentials.credentialsID)
}
inline std::string* UserCredentials::mutable_credentialsid() {
  std::string* _s = _internal_mutable_credentialsid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.UserCredentials.credentialsID)
  return _s;
}
inline const std::string& UserCredentials::_internal_credentialsid() const {
  return credentialsid_.Get();
}
inline void UserCredentials::_internal_set_credentialsid(const std::string& value) {
  
  credentialsid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserCredentials::_internal_mutable_credentialsid() {
  
  return credentialsid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserCredentials::release_credentialsid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.UserCredentials.credentialsID)
  return credentialsid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserCredentials::set_allocated_credentialsid(std::string* credentialsid) {
  if (credentialsid != nullptr) {
    
  } else {
    
  }
  credentialsid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credentialsid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (credentialsid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    credentialsid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.UserCredentials.credentialsID)
}

// -------------------------------------------------------------------

// AgentChannelMessage

// .Avanpost.Sso.Agent.Grpc.Result result = 1;
inline bool AgentChannelMessage::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AgentChannelMessage::has_result() const {
  return _internal_has_result();
}
inline void AgentChannelMessage::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& AgentChannelMessage::_internal_result() const {
  const ::Avanpost::Sso::Agent::Grpc::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::Result&>(
      ::Avanpost::Sso::Agent::Grpc::_Result_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& AgentChannelMessage::result() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.result)
  return _internal_result();
}
inline void AgentChannelMessage::unsafe_arena_set_allocated_result(
    ::Avanpost::Sso::Agent::Grpc::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.result)
}
inline ::Avanpost::Sso::Agent::Grpc::Result* AgentChannelMessage::release_result() {
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* AgentChannelMessage::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.result)
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* AgentChannelMessage::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* AgentChannelMessage::mutable_result() {
  ::Avanpost::Sso::Agent::Grpc::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.result)
  return _msg;
}
inline void AgentChannelMessage::set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::Result>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.result)
}

// string username = 2;
inline void AgentChannelMessage::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AgentChannelMessage::username() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentChannelMessage::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.username)
}
inline std::string* AgentChannelMessage::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.username)
  return _s;
}
inline const std::string& AgentChannelMessage::_internal_username() const {
  return username_.Get();
}
inline void AgentChannelMessage::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgentChannelMessage::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgentChannelMessage::release_username() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgentChannelMessage::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.username)
}

// .Avanpost.Sso.Agent.Grpc.AuthenticationFactor authenticationFactor = 3;
inline bool AgentChannelMessage::_internal_has_authenticationfactor() const {
  return this != internal_default_instance() && authenticationfactor_ != nullptr;
}
inline bool AgentChannelMessage::has_authenticationfactor() const {
  return _internal_has_authenticationfactor();
}
inline void AgentChannelMessage::clear_authenticationfactor() {
  if (GetArenaForAllocation() == nullptr && authenticationfactor_ != nullptr) {
    delete authenticationfactor_;
  }
  authenticationfactor_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& AgentChannelMessage::_internal_authenticationfactor() const {
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* p = authenticationfactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor&>(
      ::Avanpost::Sso::Agent::Grpc::_AuthenticationFactor_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& AgentChannelMessage::authenticationfactor() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.authenticationFactor)
  return _internal_authenticationfactor();
}
inline void AgentChannelMessage::unsafe_arena_set_allocated_authenticationfactor(
    ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authenticationfactor_);
  }
  authenticationfactor_ = authenticationfactor;
  if (authenticationfactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.authenticationFactor)
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* AgentChannelMessage::release_authenticationfactor() {
  
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* temp = authenticationfactor_;
  authenticationfactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* AgentChannelMessage::unsafe_arena_release_authenticationfactor() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.authenticationFactor)
  
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* temp = authenticationfactor_;
  authenticationfactor_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* AgentChannelMessage::_internal_mutable_authenticationfactor() {
  
  if (authenticationfactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AuthenticationFactor>(GetArenaForAllocation());
    authenticationfactor_ = p;
  }
  return authenticationfactor_;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* AgentChannelMessage::mutable_authenticationfactor() {
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* _msg = _internal_mutable_authenticationfactor();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.authenticationFactor)
  return _msg;
}
inline void AgentChannelMessage::set_allocated_authenticationfactor(::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete authenticationfactor_;
  }
  if (authenticationfactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::AuthenticationFactor>::GetOwningArena(authenticationfactor);
    if (message_arena != submessage_arena) {
      authenticationfactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authenticationfactor, submessage_arena);
    }
    
  } else {
    
  }
  authenticationfactor_ = authenticationfactor;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AgentChannelMessage.authenticationFactor)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuthenticationFactor

// .Avanpost.Sso.Agent.Grpc.FactorType factor = 1;
inline void AuthenticationFactor::clear_factor() {
  factor_ = 0;
}
inline ::Avanpost::Sso::Agent::Grpc::FactorType AuthenticationFactor::_internal_factor() const {
  return static_cast< ::Avanpost::Sso::Agent::Grpc::FactorType >(factor_);
}
inline ::Avanpost::Sso::Agent::Grpc::FactorType AuthenticationFactor::factor() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationFactor.factor)
  return _internal_factor();
}
inline void AuthenticationFactor::_internal_set_factor(::Avanpost::Sso::Agent::Grpc::FactorType value) {
  
  factor_ = value;
}
inline void AuthenticationFactor::set_factor(::Avanpost::Sso::Agent::Grpc::FactorType value) {
  _internal_set_factor(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationFactor.factor)
}

// map<string, string> metadata = 2;
inline int AuthenticationFactor::_internal_metadata_size() const {
  return metadata_.size();
}
inline int AuthenticationFactor::metadata_size() const {
  return _internal_metadata_size();
}
inline void AuthenticationFactor::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AuthenticationFactor::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AuthenticationFactor::metadata() const {
  // @@protoc_insertion_point(field_map:Avanpost.Sso.Agent.Grpc.AuthenticationFactor.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AuthenticationFactor::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AuthenticationFactor::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:Avanpost.Sso.Agent.Grpc.AuthenticationFactor.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// ServerChannelMessage

// .Avanpost.Sso.Agent.Grpc.AuthenticationFactor authenticationFactor = 1;
inline bool ServerChannelMessage::_internal_has_authenticationfactor() const {
  return this != internal_default_instance() && authenticationfactor_ != nullptr;
}
inline bool ServerChannelMessage::has_authenticationfactor() const {
  return _internal_has_authenticationfactor();
}
inline void ServerChannelMessage::clear_authenticationfactor() {
  if (GetArenaForAllocation() == nullptr && authenticationfactor_ != nullptr) {
    delete authenticationfactor_;
  }
  authenticationfactor_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& ServerChannelMessage::_internal_authenticationfactor() const {
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* p = authenticationfactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor&>(
      ::Avanpost::Sso::Agent::Grpc::_AuthenticationFactor_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& ServerChannelMessage::authenticationfactor() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.ServerChannelMessage.authenticationFactor)
  return _internal_authenticationfactor();
}
inline void ServerChannelMessage::unsafe_arena_set_allocated_authenticationfactor(
    ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authenticationfactor_);
  }
  authenticationfactor_ = authenticationfactor;
  if (authenticationfactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.ServerChannelMessage.authenticationFactor)
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* ServerChannelMessage::release_authenticationfactor() {
  
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* temp = authenticationfactor_;
  authenticationfactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* ServerChannelMessage::unsafe_arena_release_authenticationfactor() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.ServerChannelMessage.authenticationFactor)
  
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* temp = authenticationfactor_;
  authenticationfactor_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* ServerChannelMessage::_internal_mutable_authenticationfactor() {
  
  if (authenticationfactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AuthenticationFactor>(GetArenaForAllocation());
    authenticationfactor_ = p;
  }
  return authenticationfactor_;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* ServerChannelMessage::mutable_authenticationfactor() {
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* _msg = _internal_mutable_authenticationfactor();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.ServerChannelMessage.authenticationFactor)
  return _msg;
}
inline void ServerChannelMessage::set_allocated_authenticationfactor(::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete authenticationfactor_;
  }
  if (authenticationfactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::AuthenticationFactor>::GetOwningArena(authenticationfactor);
    if (message_arena != submessage_arena) {
      authenticationfactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authenticationfactor, submessage_arena);
    }
    
  } else {
    
  }
  authenticationfactor_ = authenticationfactor;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.ServerChannelMessage.authenticationFactor)
}

// -------------------------------------------------------------------

// ApplicationFactorRequest

// string username = 1;
inline void ApplicationFactorRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ApplicationFactorRequest::username() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApplicationFactorRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.username)
}
inline std::string* ApplicationFactorRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.username)
  return _s;
}
inline const std::string& ApplicationFactorRequest::_internal_username() const {
  return username_.Get();
}
inline void ApplicationFactorRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApplicationFactorRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApplicationFactorRequest::release_username() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApplicationFactorRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.username)
}

// string applicationID = 2;
inline void ApplicationFactorRequest::clear_applicationid() {
  applicationid_.ClearToEmpty();
}
inline const std::string& ApplicationFactorRequest::applicationid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.applicationID)
  return _internal_applicationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApplicationFactorRequest::set_applicationid(ArgT0&& arg0, ArgT... args) {
 
 applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.applicationID)
}
inline std::string* ApplicationFactorRequest::mutable_applicationid() {
  std::string* _s = _internal_mutable_applicationid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.applicationID)
  return _s;
}
inline const std::string& ApplicationFactorRequest::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void ApplicationFactorRequest::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApplicationFactorRequest::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApplicationFactorRequest::release_applicationid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.applicationID)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApplicationFactorRequest::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applicationid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.ApplicationFactorRequest.applicationID)
}

// -------------------------------------------------------------------

// FactorListResponse

// .Avanpost.Sso.Agent.Grpc.Result result = 1;
inline bool FactorListResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool FactorListResponse::has_result() const {
  return _internal_has_result();
}
inline void FactorListResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& FactorListResponse::_internal_result() const {
  const ::Avanpost::Sso::Agent::Grpc::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::Result&>(
      ::Avanpost::Sso::Agent::Grpc::_Result_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& FactorListResponse::result() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.FactorListResponse.result)
  return _internal_result();
}
inline void FactorListResponse::unsafe_arena_set_allocated_result(
    ::Avanpost::Sso::Agent::Grpc::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.FactorListResponse.result)
}
inline ::Avanpost::Sso::Agent::Grpc::Result* FactorListResponse::release_result() {
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* FactorListResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.FactorListResponse.result)
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* FactorListResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* FactorListResponse::mutable_result() {
  ::Avanpost::Sso::Agent::Grpc::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.FactorListResponse.result)
  return _msg;
}
inline void FactorListResponse::set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::Result>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.FactorListResponse.result)
}

// repeated .Avanpost.Sso.Agent.Grpc.AuthenticationFactor factors = 2;
inline int FactorListResponse::_internal_factors_size() const {
  return factors_.size();
}
inline int FactorListResponse::factors_size() const {
  return _internal_factors_size();
}
inline void FactorListResponse::clear_factors() {
  factors_.Clear();
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* FactorListResponse::mutable_factors(int index) {
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.FactorListResponse.factors)
  return factors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor >*
FactorListResponse::mutable_factors() {
  // @@protoc_insertion_point(field_mutable_list:Avanpost.Sso.Agent.Grpc.FactorListResponse.factors)
  return &factors_;
}
inline const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& FactorListResponse::_internal_factors(int index) const {
  return factors_.Get(index);
}
inline const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& FactorListResponse::factors(int index) const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.FactorListResponse.factors)
  return _internal_factors(index);
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* FactorListResponse::_internal_add_factors() {
  return factors_.Add();
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* FactorListResponse::add_factors() {
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* _add = _internal_add_factors();
  // @@protoc_insertion_point(field_add:Avanpost.Sso.Agent.Grpc.FactorListResponse.factors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor >&
FactorListResponse::factors() const {
  // @@protoc_insertion_point(field_list:Avanpost.Sso.Agent.Grpc.FactorListResponse.factors)
  return factors_;
}

// -------------------------------------------------------------------

// FactorBindingRequest

// string username = 1;
inline void FactorBindingRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& FactorBindingRequest::username() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FactorBindingRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.username)
}
inline std::string* FactorBindingRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.username)
  return _s;
}
inline const std::string& FactorBindingRequest::_internal_username() const {
  return username_.Get();
}
inline void FactorBindingRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FactorBindingRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FactorBindingRequest::release_username() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FactorBindingRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.username)
}

// .Avanpost.Sso.Agent.Grpc.AuthenticationFactor authenticationFactor = 2;
inline bool FactorBindingRequest::_internal_has_authenticationfactor() const {
  return this != internal_default_instance() && authenticationfactor_ != nullptr;
}
inline bool FactorBindingRequest::has_authenticationfactor() const {
  return _internal_has_authenticationfactor();
}
inline void FactorBindingRequest::clear_authenticationfactor() {
  if (GetArenaForAllocation() == nullptr && authenticationfactor_ != nullptr) {
    delete authenticationfactor_;
  }
  authenticationfactor_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& FactorBindingRequest::_internal_authenticationfactor() const {
  const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* p = authenticationfactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor&>(
      ::Avanpost::Sso::Agent::Grpc::_AuthenticationFactor_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor& FactorBindingRequest::authenticationfactor() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.authenticationFactor)
  return _internal_authenticationfactor();
}
inline void FactorBindingRequest::unsafe_arena_set_allocated_authenticationfactor(
    ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authenticationfactor_);
  }
  authenticationfactor_ = authenticationfactor;
  if (authenticationfactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.authenticationFactor)
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* FactorBindingRequest::release_authenticationfactor() {
  
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* temp = authenticationfactor_;
  authenticationfactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* FactorBindingRequest::unsafe_arena_release_authenticationfactor() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.authenticationFactor)
  
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* temp = authenticationfactor_;
  authenticationfactor_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* FactorBindingRequest::_internal_mutable_authenticationfactor() {
  
  if (authenticationfactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::AuthenticationFactor>(GetArenaForAllocation());
    authenticationfactor_ = p;
  }
  return authenticationfactor_;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* FactorBindingRequest::mutable_authenticationfactor() {
  ::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* _msg = _internal_mutable_authenticationfactor();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.authenticationFactor)
  return _msg;
}
inline void FactorBindingRequest::set_allocated_authenticationfactor(::Avanpost::Sso::Agent::Grpc::AuthenticationFactor* authenticationfactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete authenticationfactor_;
  }
  if (authenticationfactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::AuthenticationFactor>::GetOwningArena(authenticationfactor);
    if (message_arena != submessage_arena) {
      authenticationfactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authenticationfactor, submessage_arena);
    }
    
  } else {
    
  }
  authenticationfactor_ = authenticationfactor;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.authenticationFactor)
}

// .Avanpost.Sso.Agent.Grpc.BindingOperation operation = 3;
inline void FactorBindingRequest::clear_operation() {
  operation_ = 0;
}
inline ::Avanpost::Sso::Agent::Grpc::BindingOperation FactorBindingRequest::_internal_operation() const {
  return static_cast< ::Avanpost::Sso::Agent::Grpc::BindingOperation >(operation_);
}
inline ::Avanpost::Sso::Agent::Grpc::BindingOperation FactorBindingRequest::operation() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.operation)
  return _internal_operation();
}
inline void FactorBindingRequest::_internal_set_operation(::Avanpost::Sso::Agent::Grpc::BindingOperation value) {
  
  operation_ = value;
}
inline void FactorBindingRequest::set_operation(::Avanpost::Sso::Agent::Grpc::BindingOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.FactorBindingRequest.operation)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuthenticationRequest

// string username = 1;
inline void AuthenticationRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& AuthenticationRequest::username() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.username)
}
inline std::string* AuthenticationRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.username)
  return _s;
}
inline const std::string& AuthenticationRequest::_internal_username() const {
  return username_.Get();
}
inline void AuthenticationRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::release_username() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticationRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.username)
}

// string passcode = 2;
inline void AuthenticationRequest::clear_passcode() {
  passcode_.ClearToEmpty();
}
inline const std::string& AuthenticationRequest::passcode() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.passcode)
  return _internal_passcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationRequest::set_passcode(ArgT0&& arg0, ArgT... args) {
 
 passcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.passcode)
}
inline std::string* AuthenticationRequest::mutable_passcode() {
  std::string* _s = _internal_mutable_passcode();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.passcode)
  return _s;
}
inline const std::string& AuthenticationRequest::_internal_passcode() const {
  return passcode_.Get();
}
inline void AuthenticationRequest::_internal_set_passcode(const std::string& value) {
  
  passcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::_internal_mutable_passcode() {
  
  return passcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::release_passcode() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.passcode)
  return passcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticationRequest::set_allocated_passcode(std::string* passcode) {
  if (passcode != nullptr) {
    
  } else {
    
  }
  passcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passcode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (passcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    passcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.passcode)
}

// string state = 3;
inline void AuthenticationRequest::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& AuthenticationRequest::state() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationRequest::set_state(ArgT0&& arg0, ArgT... args) {
 
 state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.state)
}
inline std::string* AuthenticationRequest::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.state)
  return _s;
}
inline const std::string& AuthenticationRequest::_internal_state() const {
  return state_.Get();
}
inline void AuthenticationRequest::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::release_state() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticationRequest::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.state)
}

// string sessionID = 4;
inline void AuthenticationRequest::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& AuthenticationRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.sessionID)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationRequest::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.sessionID)
}
inline std::string* AuthenticationRequest::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.sessionID)
  return _s;
}
inline const std::string& AuthenticationRequest::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void AuthenticationRequest::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::release_sessionid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.sessionID)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticationRequest::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.sessionID)
}

// string applicationID = 5;
inline void AuthenticationRequest::clear_applicationid() {
  applicationid_.ClearToEmpty();
}
inline const std::string& AuthenticationRequest::applicationid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.applicationID)
  return _internal_applicationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationRequest::set_applicationid(ArgT0&& arg0, ArgT... args) {
 
 applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.applicationID)
}
inline std::string* AuthenticationRequest::mutable_applicationid() {
  std::string* _s = _internal_mutable_applicationid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.applicationID)
  return _s;
}
inline const std::string& AuthenticationRequest::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void AuthenticationRequest::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticationRequest::release_applicationid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.applicationID)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticationRequest::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applicationid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.applicationID)
}

// .Avanpost.Sso.Agent.Grpc.FactorType factor = 6;
inline void AuthenticationRequest::clear_factor() {
  factor_ = 0;
}
inline ::Avanpost::Sso::Agent::Grpc::FactorType AuthenticationRequest::_internal_factor() const {
  return static_cast< ::Avanpost::Sso::Agent::Grpc::FactorType >(factor_);
}
inline ::Avanpost::Sso::Agent::Grpc::FactorType AuthenticationRequest::factor() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.factor)
  return _internal_factor();
}
inline void AuthenticationRequest::_internal_set_factor(::Avanpost::Sso::Agent::Grpc::FactorType value) {
  
  factor_ = value;
}
inline void AuthenticationRequest::set_factor(::Avanpost::Sso::Agent::Grpc::FactorType value) {
  _internal_set_factor(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.factor)
}

// map<string, string> metadata = 7;
inline int AuthenticationRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int AuthenticationRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void AuthenticationRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AuthenticationRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AuthenticationRequest::metadata() const {
  // @@protoc_insertion_point(field_map:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AuthenticationRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AuthenticationRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:Avanpost.Sso.Agent.Grpc.AuthenticationRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AuthenticationResponse

// .Avanpost.Sso.Agent.Grpc.AuthenticationStatus status = 1;
inline void AuthenticationResponse::clear_status() {
  status_ = 0;
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationStatus AuthenticationResponse::_internal_status() const {
  return static_cast< ::Avanpost::Sso::Agent::Grpc::AuthenticationStatus >(status_);
}
inline ::Avanpost::Sso::Agent::Grpc::AuthenticationStatus AuthenticationResponse::status() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.status)
  return _internal_status();
}
inline void AuthenticationResponse::_internal_set_status(::Avanpost::Sso::Agent::Grpc::AuthenticationStatus value) {
  
  status_ = value;
}
inline void AuthenticationResponse::set_status(::Avanpost::Sso::Agent::Grpc::AuthenticationStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.status)
}

// repeated .Avanpost.Sso.Agent.Grpc.FactorType factors = 2;
inline int AuthenticationResponse::_internal_factors_size() const {
  return factors_.size();
}
inline int AuthenticationResponse::factors_size() const {
  return _internal_factors_size();
}
inline void AuthenticationResponse::clear_factors() {
  factors_.Clear();
}
inline ::Avanpost::Sso::Agent::Grpc::FactorType AuthenticationResponse::_internal_factors(int index) const {
  return static_cast< ::Avanpost::Sso::Agent::Grpc::FactorType >(factors_.Get(index));
}
inline ::Avanpost::Sso::Agent::Grpc::FactorType AuthenticationResponse::factors(int index) const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.factors)
  return _internal_factors(index);
}
inline void AuthenticationResponse::set_factors(int index, ::Avanpost::Sso::Agent::Grpc::FactorType value) {
  factors_.Set(index, value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.factors)
}
inline void AuthenticationResponse::_internal_add_factors(::Avanpost::Sso::Agent::Grpc::FactorType value) {
  factors_.Add(value);
}
inline void AuthenticationResponse::add_factors(::Avanpost::Sso::Agent::Grpc::FactorType value) {
  _internal_add_factors(value);
  // @@protoc_insertion_point(field_add:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.factors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AuthenticationResponse::factors() const {
  // @@protoc_insertion_point(field_list:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.factors)
  return factors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AuthenticationResponse::_internal_mutable_factors() {
  return &factors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AuthenticationResponse::mutable_factors() {
  // @@protoc_insertion_point(field_mutable_list:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.factors)
  return _internal_mutable_factors();
}

// string state = 3;
inline void AuthenticationResponse::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& AuthenticationResponse::state() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationResponse::set_state(ArgT0&& arg0, ArgT... args) {
 
 state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.state)
}
inline std::string* AuthenticationResponse::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.state)
  return _s;
}
inline const std::string& AuthenticationResponse::_internal_state() const {
  return state_.Get();
}
inline void AuthenticationResponse::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::release_state() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticationResponse::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.state)
}

// string sessionID = 5;
inline void AuthenticationResponse::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& AuthenticationResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.sessionID)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationResponse::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.sessionID)
}
inline std::string* AuthenticationResponse::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.sessionID)
  return _s;
}
inline const std::string& AuthenticationResponse::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void AuthenticationResponse::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.sessionID)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticationResponse::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.sessionID)
}

// string token = 6;
inline void AuthenticationResponse::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& AuthenticationResponse::token() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticationResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.token)
}
inline std::string* AuthenticationResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.token)
  return _s;
}
inline const std::string& AuthenticationResponse::_internal_token() const {
  return token_.Get();
}
inline void AuthenticationResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticationResponse::release_token() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticationResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.token)
}

// map<string, string> metadata = 7;
inline int AuthenticationResponse::_internal_metadata_size() const {
  return metadata_.size();
}
inline int AuthenticationResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void AuthenticationResponse::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AuthenticationResponse::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AuthenticationResponse::metadata() const {
  // @@protoc_insertion_point(field_map:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AuthenticationResponse::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AuthenticationResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.metadata)
  return _internal_mutable_metadata();
}

// repeated .Avanpost.Sso.Agent.Grpc.UserCredentials credentials = 8;
inline int AuthenticationResponse::_internal_credentials_size() const {
  return credentials_.size();
}
inline int AuthenticationResponse::credentials_size() const {
  return _internal_credentials_size();
}
inline void AuthenticationResponse::clear_credentials() {
  credentials_.Clear();
}
inline ::Avanpost::Sso::Agent::Grpc::UserCredentials* AuthenticationResponse::mutable_credentials(int index) {
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.credentials)
  return credentials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::UserCredentials >*
AuthenticationResponse::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable_list:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.credentials)
  return &credentials_;
}
inline const ::Avanpost::Sso::Agent::Grpc::UserCredentials& AuthenticationResponse::_internal_credentials(int index) const {
  return credentials_.Get(index);
}
inline const ::Avanpost::Sso::Agent::Grpc::UserCredentials& AuthenticationResponse::credentials(int index) const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.credentials)
  return _internal_credentials(index);
}
inline ::Avanpost::Sso::Agent::Grpc::UserCredentials* AuthenticationResponse::_internal_add_credentials() {
  return credentials_.Add();
}
inline ::Avanpost::Sso::Agent::Grpc::UserCredentials* AuthenticationResponse::add_credentials() {
  ::Avanpost::Sso::Agent::Grpc::UserCredentials* _add = _internal_add_credentials();
  // @@protoc_insertion_point(field_add:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.credentials)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Avanpost::Sso::Agent::Grpc::UserCredentials >&
AuthenticationResponse::credentials() const {
  // @@protoc_insertion_point(field_list:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.credentials)
  return credentials_;
}

// int32 remainingAttemptsCount = 9;
inline void AuthenticationResponse::clear_remainingattemptscount() {
  remainingattemptscount_ = 0;
}
inline int32_t AuthenticationResponse::_internal_remainingattemptscount() const {
  return remainingattemptscount_;
}
inline int32_t AuthenticationResponse::remainingattemptscount() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.remainingAttemptsCount)
  return _internal_remainingattemptscount();
}
inline void AuthenticationResponse::_internal_set_remainingattemptscount(int32_t value) {
  
  remainingattemptscount_ = value;
}
inline void AuthenticationResponse::set_remainingattemptscount(int32_t value) {
  _internal_set_remainingattemptscount(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.AuthenticationResponse.remainingAttemptsCount)
}

// -------------------------------------------------------------------

// ChangePasswordRequest

// string username = 1;
inline void ChangePasswordRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ChangePasswordRequest::username() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangePasswordRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.username)
}
inline std::string* ChangePasswordRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.username)
  return _s;
}
inline const std::string& ChangePasswordRequest::_internal_username() const {
  return username_.Get();
}
inline void ChangePasswordRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::release_username() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangePasswordRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.username)
}

// string oldPassword = 2;
inline void ChangePasswordRequest::clear_oldpassword() {
  oldpassword_.ClearToEmpty();
}
inline const std::string& ChangePasswordRequest::oldpassword() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.oldPassword)
  return _internal_oldpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangePasswordRequest::set_oldpassword(ArgT0&& arg0, ArgT... args) {
 
 oldpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.oldPassword)
}
inline std::string* ChangePasswordRequest::mutable_oldpassword() {
  std::string* _s = _internal_mutable_oldpassword();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.oldPassword)
  return _s;
}
inline const std::string& ChangePasswordRequest::_internal_oldpassword() const {
  return oldpassword_.Get();
}
inline void ChangePasswordRequest::_internal_set_oldpassword(const std::string& value) {
  
  oldpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::_internal_mutable_oldpassword() {
  
  return oldpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::release_oldpassword() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.oldPassword)
  return oldpassword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangePasswordRequest::set_allocated_oldpassword(std::string* oldpassword) {
  if (oldpassword != nullptr) {
    
  } else {
    
  }
  oldpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldpassword,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oldpassword_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    oldpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.oldPassword)
}

// string newPassword = 3;
inline void ChangePasswordRequest::clear_newpassword() {
  newpassword_.ClearToEmpty();
}
inline const std::string& ChangePasswordRequest::newpassword() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.newPassword)
  return _internal_newpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangePasswordRequest::set_newpassword(ArgT0&& arg0, ArgT... args) {
 
 newpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.newPassword)
}
inline std::string* ChangePasswordRequest::mutable_newpassword() {
  std::string* _s = _internal_mutable_newpassword();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.newPassword)
  return _s;
}
inline const std::string& ChangePasswordRequest::_internal_newpassword() const {
  return newpassword_.Get();
}
inline void ChangePasswordRequest::_internal_set_newpassword(const std::string& value) {
  
  newpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::_internal_mutable_newpassword() {
  
  return newpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangePasswordRequest::release_newpassword() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.newPassword)
  return newpassword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangePasswordRequest::set_allocated_newpassword(std::string* newpassword) {
  if (newpassword != nullptr) {
    
  } else {
    
  }
  newpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newpassword,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (newpassword_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    newpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.ChangePasswordRequest.newPassword)
}

// -------------------------------------------------------------------

// ChangePasswordResponse

// .Avanpost.Sso.Agent.Grpc.ChangePasswordStatus status = 1;
inline void ChangePasswordResponse::clear_status() {
  status_ = 0;
}
inline ::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus ChangePasswordResponse::_internal_status() const {
  return static_cast< ::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus >(status_);
}
inline ::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus ChangePasswordResponse::status() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.ChangePasswordResponse.status)
  return _internal_status();
}
inline void ChangePasswordResponse::_internal_set_status(::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus value) {
  
  status_ = value;
}
inline void ChangePasswordResponse::set_status(::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.ChangePasswordResponse.status)
}

// string message = 2;
inline void ChangePasswordResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ChangePasswordResponse::message() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.ChangePasswordResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangePasswordResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.ChangePasswordResponse.message)
}
inline std::string* ChangePasswordResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.ChangePasswordResponse.message)
  return _s;
}
inline const std::string& ChangePasswordResponse::_internal_message() const {
  return message_.Get();
}
inline void ChangePasswordResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangePasswordResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangePasswordResponse::release_message() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.ChangePasswordResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangePasswordResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.ChangePasswordResponse.message)
}

// -------------------------------------------------------------------

// SessionRequest

// string username = 1;
inline void SessionRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& SessionRequest::username() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SessionRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SessionRequest.username)
}
inline std::string* SessionRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SessionRequest.username)
  return _s;
}
inline const std::string& SessionRequest::_internal_username() const {
  return username_.Get();
}
inline void SessionRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionRequest::release_username() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SessionRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SessionRequest.username)
}

// .Avanpost.Sso.Agent.Grpc.FactorType handledFactor = 2;
inline void SessionRequest::clear_handledfactor() {
  handledfactor_ = 0;
}
inline ::Avanpost::Sso::Agent::Grpc::FactorType SessionRequest::_internal_handledfactor() const {
  return static_cast< ::Avanpost::Sso::Agent::Grpc::FactorType >(handledfactor_);
}
inline ::Avanpost::Sso::Agent::Grpc::FactorType SessionRequest::handledfactor() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SessionRequest.handledFactor)
  return _internal_handledfactor();
}
inline void SessionRequest::_internal_set_handledfactor(::Avanpost::Sso::Agent::Grpc::FactorType value) {
  
  handledfactor_ = value;
}
inline void SessionRequest::set_handledfactor(::Avanpost::Sso::Agent::Grpc::FactorType value) {
  _internal_set_handledfactor(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SessionRequest.handledFactor)
}

// string applicationID = 3;
inline void SessionRequest::clear_applicationid() {
  applicationid_.ClearToEmpty();
}
inline const std::string& SessionRequest::applicationid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SessionRequest.applicationID)
  return _internal_applicationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionRequest::set_applicationid(ArgT0&& arg0, ArgT... args) {
 
 applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SessionRequest.applicationID)
}
inline std::string* SessionRequest::mutable_applicationid() {
  std::string* _s = _internal_mutable_applicationid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SessionRequest.applicationID)
  return _s;
}
inline const std::string& SessionRequest::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void SessionRequest::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionRequest::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionRequest::release_applicationid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SessionRequest.applicationID)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionRequest::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applicationid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SessionRequest.applicationID)
}

// -------------------------------------------------------------------

// SessionResponse

// .Avanpost.Sso.Agent.Grpc.Result result = 1;
inline bool SessionResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SessionResponse::has_result() const {
  return _internal_has_result();
}
inline void SessionResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& SessionResponse::_internal_result() const {
  const ::Avanpost::Sso::Agent::Grpc::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::Result&>(
      ::Avanpost::Sso::Agent::Grpc::_Result_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::Result& SessionResponse::result() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SessionResponse.result)
  return _internal_result();
}
inline void SessionResponse::unsafe_arena_set_allocated_result(
    ::Avanpost::Sso::Agent::Grpc::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.SessionResponse.result)
}
inline ::Avanpost::Sso::Agent::Grpc::Result* SessionResponse::release_result() {
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* SessionResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SessionResponse.result)
  
  ::Avanpost::Sso::Agent::Grpc::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* SessionResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::Avanpost::Sso::Agent::Grpc::Result* SessionResponse::mutable_result() {
  ::Avanpost::Sso::Agent::Grpc::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SessionResponse.result)
  return _msg;
}
inline void SessionResponse::set_allocated_result(::Avanpost::Sso::Agent::Grpc::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::Result>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SessionResponse.result)
}

// string sessionID = 2;
inline void SessionResponse::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& SessionResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SessionResponse.sessionID)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionResponse::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SessionResponse.sessionID)
}
inline std::string* SessionResponse::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SessionResponse.sessionID)
  return _s;
}
inline const std::string& SessionResponse::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void SessionResponse::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SessionResponse::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SessionResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SessionResponse.sessionID)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SessionResponse::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SessionResponse.sessionID)
}

// -------------------------------------------------------------------

// SetUserCredentialRequest

// string applicationID = 1;
inline void SetUserCredentialRequest::clear_applicationid() {
  applicationid_.ClearToEmpty();
}
inline const std::string& SetUserCredentialRequest::applicationid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.applicationID)
  return _internal_applicationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserCredentialRequest::set_applicationid(ArgT0&& arg0, ArgT... args) {
 
 applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.applicationID)
}
inline std::string* SetUserCredentialRequest::mutable_applicationid() {
  std::string* _s = _internal_mutable_applicationid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.applicationID)
  return _s;
}
inline const std::string& SetUserCredentialRequest::_internal_applicationid() const {
  return applicationid_.Get();
}
inline void SetUserCredentialRequest::_internal_set_applicationid(const std::string& value) {
  
  applicationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::_internal_mutable_applicationid() {
  
  return applicationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::release_applicationid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.applicationID)
  return applicationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetUserCredentialRequest::set_allocated_applicationid(std::string* applicationid) {
  if (applicationid != nullptr) {
    
  } else {
    
  }
  applicationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), applicationid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (applicationid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    applicationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.applicationID)
}

// string credentialID = 2;
inline void SetUserCredentialRequest::clear_credentialid() {
  credentialid_.ClearToEmpty();
}
inline const std::string& SetUserCredentialRequest::credentialid() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.credentialID)
  return _internal_credentialid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserCredentialRequest::set_credentialid(ArgT0&& arg0, ArgT... args) {
 
 credentialid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.credentialID)
}
inline std::string* SetUserCredentialRequest::mutable_credentialid() {
  std::string* _s = _internal_mutable_credentialid();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.credentialID)
  return _s;
}
inline const std::string& SetUserCredentialRequest::_internal_credentialid() const {
  return credentialid_.Get();
}
inline void SetUserCredentialRequest::_internal_set_credentialid(const std::string& value) {
  
  credentialid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::_internal_mutable_credentialid() {
  
  return credentialid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::release_credentialid() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.credentialID)
  return credentialid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetUserCredentialRequest::set_allocated_credentialid(std::string* credentialid) {
  if (credentialid != nullptr) {
    
  } else {
    
  }
  credentialid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credentialid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (credentialid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    credentialid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.credentialID)
}

// string username = 3;
inline void SetUserCredentialRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& SetUserCredentialRequest::username() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserCredentialRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.username)
}
inline std::string* SetUserCredentialRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.username)
  return _s;
}
inline const std::string& SetUserCredentialRequest::_internal_username() const {
  return username_.Get();
}
inline void SetUserCredentialRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::release_username() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetUserCredentialRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.username)
}

// .Avanpost.Sso.Agent.Grpc.PasswordInfo password = 4;
inline bool SetUserCredentialRequest::_internal_has_password() const {
  return this != internal_default_instance() && password_ != nullptr;
}
inline bool SetUserCredentialRequest::has_password() const {
  return _internal_has_password();
}
inline void SetUserCredentialRequest::clear_password() {
  if (GetArenaForAllocation() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::PasswordInfo& SetUserCredentialRequest::_internal_password() const {
  const ::Avanpost::Sso::Agent::Grpc::PasswordInfo* p = password_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::PasswordInfo&>(
      ::Avanpost::Sso::Agent::Grpc::_PasswordInfo_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::PasswordInfo& SetUserCredentialRequest::password() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.password)
  return _internal_password();
}
inline void SetUserCredentialRequest::unsafe_arena_set_allocated_password(
    ::Avanpost::Sso::Agent::Grpc::PasswordInfo* password) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_);
  }
  password_ = password;
  if (password) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.password)
}
inline ::Avanpost::Sso::Agent::Grpc::PasswordInfo* SetUserCredentialRequest::release_password() {
  
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* temp = password_;
  password_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::PasswordInfo* SetUserCredentialRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.password)
  
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* temp = password_;
  password_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::PasswordInfo* SetUserCredentialRequest::_internal_mutable_password() {
  
  if (password_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::PasswordInfo>(GetArenaForAllocation());
    password_ = p;
  }
  return password_;
}
inline ::Avanpost::Sso::Agent::Grpc::PasswordInfo* SetUserCredentialRequest::mutable_password() {
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* _msg = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.password)
  return _msg;
}
inline void SetUserCredentialRequest::set_allocated_password(::Avanpost::Sso::Agent::Grpc::PasswordInfo* password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete password_;
  }
  if (password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::PasswordInfo>::GetOwningArena(password);
    if (message_arena != submessage_arena) {
      password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    
  } else {
    
  }
  password_ = password;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.password)
}

// string domain = 5;
inline void SetUserCredentialRequest::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& SetUserCredentialRequest::domain() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserCredentialRequest::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.domain)
}
inline std::string* SetUserCredentialRequest::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.domain)
  return _s;
}
inline const std::string& SetUserCredentialRequest::_internal_domain() const {
  return domain_.Get();
}
inline void SetUserCredentialRequest::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::release_domain() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetUserCredentialRequest::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.domain)
}

// string comment = 6;
inline void SetUserCredentialRequest::clear_comment() {
  comment_.ClearToEmpty();
}
inline const std::string& SetUserCredentialRequest::comment() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserCredentialRequest::set_comment(ArgT0&& arg0, ArgT... args) {
 
 comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.comment)
}
inline std::string* SetUserCredentialRequest::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.comment)
  return _s;
}
inline const std::string& SetUserCredentialRequest::_internal_comment() const {
  return comment_.Get();
}
inline void SetUserCredentialRequest::_internal_set_comment(const std::string& value) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::_internal_mutable_comment() {
  
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetUserCredentialRequest::release_comment() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetUserCredentialRequest::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comment_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialRequest.comment)
}

// -------------------------------------------------------------------

// PasswordInfo

// string password = 1;
inline void PasswordInfo::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& PasswordInfo::password() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.PasswordInfo.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordInfo::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.PasswordInfo.password)
}
inline std::string* PasswordInfo::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.PasswordInfo.password)
  return _s;
}
inline const std::string& PasswordInfo::_internal_password() const {
  return password_.Get();
}
inline void PasswordInfo::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PasswordInfo::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PasswordInfo::release_password() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.PasswordInfo.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PasswordInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.PasswordInfo.password)
}

// string passwordConfirm = 2;
inline void PasswordInfo::clear_passwordconfirm() {
  passwordconfirm_.ClearToEmpty();
}
inline const std::string& PasswordInfo::passwordconfirm() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.PasswordInfo.passwordConfirm)
  return _internal_passwordconfirm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordInfo::set_passwordconfirm(ArgT0&& arg0, ArgT... args) {
 
 passwordconfirm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.PasswordInfo.passwordConfirm)
}
inline std::string* PasswordInfo::mutable_passwordconfirm() {
  std::string* _s = _internal_mutable_passwordconfirm();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.PasswordInfo.passwordConfirm)
  return _s;
}
inline const std::string& PasswordInfo::_internal_passwordconfirm() const {
  return passwordconfirm_.Get();
}
inline void PasswordInfo::_internal_set_passwordconfirm(const std::string& value) {
  
  passwordconfirm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PasswordInfo::_internal_mutable_passwordconfirm() {
  
  return passwordconfirm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PasswordInfo::release_passwordconfirm() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.PasswordInfo.passwordConfirm)
  return passwordconfirm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PasswordInfo::set_allocated_passwordconfirm(std::string* passwordconfirm) {
  if (passwordconfirm != nullptr) {
    
  } else {
    
  }
  passwordconfirm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwordconfirm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (passwordconfirm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    passwordconfirm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.PasswordInfo.passwordConfirm)
}

// -------------------------------------------------------------------

// SetUserCredentialResponse

// .Avanpost.Sso.Agent.Grpc.SetUserCredentialStatus status = 1;
inline void SetUserCredentialResponse::clear_status() {
  status_ = 0;
}
inline ::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus SetUserCredentialResponse::_internal_status() const {
  return static_cast< ::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus >(status_);
}
inline ::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus SetUserCredentialResponse::status() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.status)
  return _internal_status();
}
inline void SetUserCredentialResponse::_internal_set_status(::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus value) {
  
  status_ = value;
}
inline void SetUserCredentialResponse::set_status(::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.status)
}

// .Avanpost.Sso.Agent.Grpc.PasswordInfo password = 2;
inline bool SetUserCredentialResponse::_internal_has_password() const {
  return this != internal_default_instance() && password_ != nullptr;
}
inline bool SetUserCredentialResponse::has_password() const {
  return _internal_has_password();
}
inline void SetUserCredentialResponse::clear_password() {
  if (GetArenaForAllocation() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
}
inline const ::Avanpost::Sso::Agent::Grpc::PasswordInfo& SetUserCredentialResponse::_internal_password() const {
  const ::Avanpost::Sso::Agent::Grpc::PasswordInfo* p = password_;
  return p != nullptr ? *p : reinterpret_cast<const ::Avanpost::Sso::Agent::Grpc::PasswordInfo&>(
      ::Avanpost::Sso::Agent::Grpc::_PasswordInfo_default_instance_);
}
inline const ::Avanpost::Sso::Agent::Grpc::PasswordInfo& SetUserCredentialResponse::password() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.password)
  return _internal_password();
}
inline void SetUserCredentialResponse::unsafe_arena_set_allocated_password(
    ::Avanpost::Sso::Agent::Grpc::PasswordInfo* password) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_);
  }
  password_ = password;
  if (password) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.password)
}
inline ::Avanpost::Sso::Agent::Grpc::PasswordInfo* SetUserCredentialResponse::release_password() {
  
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* temp = password_;
  password_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::PasswordInfo* SetUserCredentialResponse::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.password)
  
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* temp = password_;
  password_ = nullptr;
  return temp;
}
inline ::Avanpost::Sso::Agent::Grpc::PasswordInfo* SetUserCredentialResponse::_internal_mutable_password() {
  
  if (password_ == nullptr) {
    auto* p = CreateMaybeMessage<::Avanpost::Sso::Agent::Grpc::PasswordInfo>(GetArenaForAllocation());
    password_ = p;
  }
  return password_;
}
inline ::Avanpost::Sso::Agent::Grpc::PasswordInfo* SetUserCredentialResponse::mutable_password() {
  ::Avanpost::Sso::Agent::Grpc::PasswordInfo* _msg = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.password)
  return _msg;
}
inline void SetUserCredentialResponse::set_allocated_password(::Avanpost::Sso::Agent::Grpc::PasswordInfo* password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete password_;
  }
  if (password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Avanpost::Sso::Agent::Grpc::PasswordInfo>::GetOwningArena(password);
    if (message_arena != submessage_arena) {
      password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    
  } else {
    
  }
  password_ = password;
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.password)
}

// string errorText = 3;
inline void SetUserCredentialResponse::clear_errortext() {
  errortext_.ClearToEmpty();
}
inline const std::string& SetUserCredentialResponse::errortext() const {
  // @@protoc_insertion_point(field_get:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.errorText)
  return _internal_errortext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserCredentialResponse::set_errortext(ArgT0&& arg0, ArgT... args) {
 
 errortext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.errorText)
}
inline std::string* SetUserCredentialResponse::mutable_errortext() {
  std::string* _s = _internal_mutable_errortext();
  // @@protoc_insertion_point(field_mutable:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.errorText)
  return _s;
}
inline const std::string& SetUserCredentialResponse::_internal_errortext() const {
  return errortext_.Get();
}
inline void SetUserCredentialResponse::_internal_set_errortext(const std::string& value) {
  
  errortext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetUserCredentialResponse::_internal_mutable_errortext() {
  
  return errortext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetUserCredentialResponse::release_errortext() {
  // @@protoc_insertion_point(field_release:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.errorText)
  return errortext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetUserCredentialResponse::set_allocated_errortext(std::string* errortext) {
  if (errortext != nullptr) {
    
  } else {
    
  }
  errortext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errortext,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errortext_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errortext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Avanpost.Sso.Agent.Grpc.SetUserCredentialResponse.errorText)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grpc
}  // namespace Agent
}  // namespace Sso
}  // namespace Avanpost

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Avanpost::Sso::Agent::Grpc::FactorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Avanpost::Sso::Agent::Grpc::FactorType>() {
  return ::Avanpost::Sso::Agent::Grpc::FactorType_descriptor();
}
template <> struct is_proto_enum< ::Avanpost::Sso::Agent::Grpc::BindingOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Avanpost::Sso::Agent::Grpc::BindingOperation>() {
  return ::Avanpost::Sso::Agent::Grpc::BindingOperation_descriptor();
}
template <> struct is_proto_enum< ::Avanpost::Sso::Agent::Grpc::AuthenticationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Avanpost::Sso::Agent::Grpc::AuthenticationStatus>() {
  return ::Avanpost::Sso::Agent::Grpc::AuthenticationStatus_descriptor();
}
template <> struct is_proto_enum< ::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus>() {
  return ::Avanpost::Sso::Agent::Grpc::ChangePasswordStatus_descriptor();
}
template <> struct is_proto_enum< ::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus>() {
  return ::Avanpost::Sso::Agent::Grpc::SetUserCredentialStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_agentcontrol_2eproto

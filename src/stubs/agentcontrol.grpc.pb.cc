// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agentcontrol.proto

#include "agentcontrol.pb.h"
#include "agentcontrol.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Avanpost {
namespace Sso {
namespace Agent {
namespace Grpc {

static const char* AgentControl_method_names[] = {
  "/Avanpost.Sso.Agent.Grpc.AgentControl/GetUserApplications",
  "/Avanpost.Sso.Agent.Grpc.AgentControl/CreateSubscriptionChannel",
  "/Avanpost.Sso.Agent.Grpc.AgentControl/GetFactorList",
  "/Avanpost.Sso.Agent.Grpc.AgentControl/FactorBinding",
  "/Avanpost.Sso.Agent.Grpc.AgentControl/GetTemporaryAuthCode",
  "/Avanpost.Sso.Agent.Grpc.AgentControl/Authenticate",
  "/Avanpost.Sso.Agent.Grpc.AgentControl/ChangePassword",
  "/Avanpost.Sso.Agent.Grpc.AgentControl/CreateSession",
  "/Avanpost.Sso.Agent.Grpc.AgentControl/SetUserCredential",
};

std::unique_ptr< AgentControl::Stub> AgentControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AgentControl::Stub> stub(new AgentControl::Stub(channel, options));
  return stub;
}

AgentControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetUserApplications_(AgentControl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSubscriptionChannel_(AgentControl_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_GetFactorList_(AgentControl_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FactorBinding_(AgentControl_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTemporaryAuthCode_(AgentControl_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Authenticate_(AgentControl_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangePassword_(AgentControl_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSession_(AgentControl_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetUserCredential_(AgentControl_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AgentControl::Stub::GetUserApplications(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest& request, ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Avanpost::Sso::Agent::Grpc::UserRequest, ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserApplications_, context, request, response);
}

void AgentControl::Stub::async::GetUserApplications(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest* request, ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Avanpost::Sso::Agent::Grpc::UserRequest, ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserApplications_, context, request, response, std::move(f));
}

void AgentControl::Stub::async::GetUserApplications(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest* request, ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserApplications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse>* AgentControl::Stub::PrepareAsyncGetUserApplicationsRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse, ::Avanpost::Sso::Agent::Grpc::UserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserApplications_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse>* AgentControl::Stub::AsyncGetUserApplicationsRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserApplicationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage, ::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>* AgentControl::Stub::CreateSubscriptionChannelRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage, ::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>::Create(channel_.get(), rpcmethod_CreateSubscriptionChannel_, context);
}

void AgentControl::Stub::async::CreateSubscriptionChannel(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage,::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage,::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_CreateSubscriptionChannel_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage, ::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>* AgentControl::Stub::AsyncCreateSubscriptionChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage, ::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>::Create(channel_.get(), cq, rpcmethod_CreateSubscriptionChannel_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage, ::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>* AgentControl::Stub::PrepareAsyncCreateSubscriptionChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage, ::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>::Create(channel_.get(), cq, rpcmethod_CreateSubscriptionChannel_, context, false, nullptr);
}

::grpc::Status AgentControl::Stub::GetFactorList(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest& request, ::Avanpost::Sso::Agent::Grpc::FactorListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Avanpost::Sso::Agent::Grpc::UserRequest, ::Avanpost::Sso::Agent::Grpc::FactorListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFactorList_, context, request, response);
}

void AgentControl::Stub::async::GetFactorList(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest* request, ::Avanpost::Sso::Agent::Grpc::FactorListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Avanpost::Sso::Agent::Grpc::UserRequest, ::Avanpost::Sso::Agent::Grpc::FactorListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFactorList_, context, request, response, std::move(f));
}

void AgentControl::Stub::async::GetFactorList(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest* request, ::Avanpost::Sso::Agent::Grpc::FactorListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFactorList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::FactorListResponse>* AgentControl::Stub::PrepareAsyncGetFactorListRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Avanpost::Sso::Agent::Grpc::FactorListResponse, ::Avanpost::Sso::Agent::Grpc::UserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFactorList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::FactorListResponse>* AgentControl::Stub::AsyncGetFactorListRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFactorListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentControl::Stub::FactorBinding(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest& request, ::Avanpost::Sso::Agent::Grpc::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest, ::Avanpost::Sso::Agent::Grpc::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FactorBinding_, context, request, response);
}

void AgentControl::Stub::async::FactorBinding(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest* request, ::Avanpost::Sso::Agent::Grpc::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest, ::Avanpost::Sso::Agent::Grpc::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FactorBinding_, context, request, response, std::move(f));
}

void AgentControl::Stub::async::FactorBinding(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest* request, ::Avanpost::Sso::Agent::Grpc::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FactorBinding_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::Result>* AgentControl::Stub::PrepareAsyncFactorBindingRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Avanpost::Sso::Agent::Grpc::Result, ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FactorBinding_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::Result>* AgentControl::Stub::AsyncFactorBindingRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFactorBindingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentControl::Stub::GetTemporaryAuthCode(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest& request, ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest, ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTemporaryAuthCode_, context, request, response);
}

void AgentControl::Stub::async::GetTemporaryAuthCode(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest* request, ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest, ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTemporaryAuthCode_, context, request, response, std::move(f));
}

void AgentControl::Stub::async::GetTemporaryAuthCode(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest* request, ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTemporaryAuthCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse>* AgentControl::Stub::PrepareAsyncGetTemporaryAuthCodeRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse, ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTemporaryAuthCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse>* AgentControl::Stub::AsyncGetTemporaryAuthCodeRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTemporaryAuthCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentControl::Stub::Authenticate(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest& request, ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest, ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Authenticate_, context, request, response);
}

void AgentControl::Stub::async::Authenticate(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest* request, ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest, ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, std::move(f));
}

void AgentControl::Stub::async::Authenticate(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest* request, ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse>* AgentControl::Stub::PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse, ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Authenticate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse>* AgentControl::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentControl::Stub::ChangePassword(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest& request, ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest, ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

void AgentControl::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest* request, ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest, ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void AgentControl::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest* request, ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse>* AgentControl::Stub::PrepareAsyncChangePasswordRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse, ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangePassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse>* AgentControl::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangePasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentControl::Stub::CreateSession(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SessionRequest& request, ::Avanpost::Sso::Agent::Grpc::SessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Avanpost::Sso::Agent::Grpc::SessionRequest, ::Avanpost::Sso::Agent::Grpc::SessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSession_, context, request, response);
}

void AgentControl::Stub::async::CreateSession(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SessionRequest* request, ::Avanpost::Sso::Agent::Grpc::SessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Avanpost::Sso::Agent::Grpc::SessionRequest, ::Avanpost::Sso::Agent::Grpc::SessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, std::move(f));
}

void AgentControl::Stub::async::CreateSession(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SessionRequest* request, ::Avanpost::Sso::Agent::Grpc::SessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::SessionResponse>* AgentControl::Stub::PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Avanpost::Sso::Agent::Grpc::SessionResponse, ::Avanpost::Sso::Agent::Grpc::SessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::SessionResponse>* AgentControl::Stub::AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentControl::Stub::SetUserCredential(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest& request, ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest, ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetUserCredential_, context, request, response);
}

void AgentControl::Stub::async::SetUserCredential(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest* request, ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest, ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetUserCredential_, context, request, response, std::move(f));
}

void AgentControl::Stub::async::SetUserCredential(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest* request, ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetUserCredential_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse>* AgentControl::Stub::PrepareAsyncSetUserCredentialRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse, ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetUserCredential_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse>* AgentControl::Stub::AsyncSetUserCredentialRaw(::grpc::ClientContext* context, const ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetUserCredentialRaw(context, request, cq);
  result->StartCall();
  return result;
}

AgentControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentControl::Service, ::Avanpost::Sso::Agent::Grpc::UserRequest, ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Avanpost::Sso::Agent::Grpc::UserRequest* req,
             ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse* resp) {
               return service->GetUserApplications(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentControl_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< AgentControl::Service, ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage, ::Avanpost::Sso::Agent::Grpc::ServerChannelMessage>(
          [](AgentControl::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::Avanpost::Sso::Agent::Grpc::ServerChannelMessage,
             ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage>* stream) {
               return service->CreateSubscriptionChannel(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentControl_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentControl::Service, ::Avanpost::Sso::Agent::Grpc::UserRequest, ::Avanpost::Sso::Agent::Grpc::FactorListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Avanpost::Sso::Agent::Grpc::UserRequest* req,
             ::Avanpost::Sso::Agent::Grpc::FactorListResponse* resp) {
               return service->GetFactorList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentControl_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentControl::Service, ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest, ::Avanpost::Sso::Agent::Grpc::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest* req,
             ::Avanpost::Sso::Agent::Grpc::Result* resp) {
               return service->FactorBinding(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentControl_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentControl::Service, ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest, ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest* req,
             ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse* resp) {
               return service->GetTemporaryAuthCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentControl_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentControl::Service, ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest, ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest* req,
             ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse* resp) {
               return service->Authenticate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentControl_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentControl::Service, ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest, ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest* req,
             ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse* resp) {
               return service->ChangePassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentControl_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentControl::Service, ::Avanpost::Sso::Agent::Grpc::SessionRequest, ::Avanpost::Sso::Agent::Grpc::SessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Avanpost::Sso::Agent::Grpc::SessionRequest* req,
             ::Avanpost::Sso::Agent::Grpc::SessionResponse* resp) {
               return service->CreateSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentControl_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentControl::Service, ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest, ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest* req,
             ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse* resp) {
               return service->SetUserCredential(ctx, req, resp);
             }, this)));
}

AgentControl::Service::~Service() {
}

::grpc::Status AgentControl::Service::GetUserApplications(::grpc::ServerContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest* request, ::Avanpost::Sso::Agent::Grpc::UserApplicationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentControl::Service::CreateSubscriptionChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Avanpost::Sso::Agent::Grpc::ServerChannelMessage, ::Avanpost::Sso::Agent::Grpc::AgentChannelMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentControl::Service::GetFactorList(::grpc::ServerContext* context, const ::Avanpost::Sso::Agent::Grpc::UserRequest* request, ::Avanpost::Sso::Agent::Grpc::FactorListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentControl::Service::FactorBinding(::grpc::ServerContext* context, const ::Avanpost::Sso::Agent::Grpc::FactorBindingRequest* request, ::Avanpost::Sso::Agent::Grpc::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentControl::Service::GetTemporaryAuthCode(::grpc::ServerContext* context, const ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeRequest* request, ::Avanpost::Sso::Agent::Grpc::TemporaryAuthCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentControl::Service::Authenticate(::grpc::ServerContext* context, const ::Avanpost::Sso::Agent::Grpc::AuthenticationRequest* request, ::Avanpost::Sso::Agent::Grpc::AuthenticationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentControl::Service::ChangePassword(::grpc::ServerContext* context, const ::Avanpost::Sso::Agent::Grpc::ChangePasswordRequest* request, ::Avanpost::Sso::Agent::Grpc::ChangePasswordResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentControl::Service::CreateSession(::grpc::ServerContext* context, const ::Avanpost::Sso::Agent::Grpc::SessionRequest* request, ::Avanpost::Sso::Agent::Grpc::SessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentControl::Service::SetUserCredential(::grpc::ServerContext* context, const ::Avanpost::Sso::Agent::Grpc::SetUserCredentialRequest* request, ::Avanpost::Sso::Agent::Grpc::SetUserCredentialResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Avanpost
}  // namespace Sso
}  // namespace Agent
}  // namespace Grpc

